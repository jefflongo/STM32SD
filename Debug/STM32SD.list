
STM32SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a5c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002c08  08002c08  00012c08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002d04  08002d04  00012d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  08002d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  8 .bss          00000518  20000020  20000020  00020020  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000538  20000538  00020020  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001814a  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000323a  00000000  00000000  0003819a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008b13  00000000  00000000  0003b3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  00043ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00044848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005c31  00000000  00000000  000455e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002fe8  00000000  00000000  0004b219  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004e201  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001a30  00000000  00000000  0004e280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002bf0 	.word	0x08002bf0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08002bf0 	.word	0x08002bf0

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b97a 	b.w	8000508 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	468c      	mov	ip, r1
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	9e08      	ldr	r6, [sp, #32]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d151      	bne.n	80002e0 <__udivmoddi4+0xb4>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d96d      	bls.n	800031e <__udivmoddi4+0xf2>
 8000242:	fab2 fe82 	clz	lr, r2
 8000246:	f1be 0f00 	cmp.w	lr, #0
 800024a:	d00b      	beq.n	8000264 <__udivmoddi4+0x38>
 800024c:	f1ce 0c20 	rsb	ip, lr, #32
 8000250:	fa01 f50e 	lsl.w	r5, r1, lr
 8000254:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000258:	fa02 f70e 	lsl.w	r7, r2, lr
 800025c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000260:	fa00 f40e 	lsl.w	r4, r0, lr
 8000264:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000268:	0c25      	lsrs	r5, r4, #16
 800026a:	fbbc f8fa 	udiv	r8, ip, sl
 800026e:	fa1f f987 	uxth.w	r9, r7
 8000272:	fb0a cc18 	mls	ip, sl, r8, ip
 8000276:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027a:	fb08 f309 	mul.w	r3, r8, r9
 800027e:	42ab      	cmp	r3, r5
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x6c>
 8000282:	19ed      	adds	r5, r5, r7
 8000284:	f108 32ff 	add.w	r2, r8, #4294967295
 8000288:	f080 8123 	bcs.w	80004d2 <__udivmoddi4+0x2a6>
 800028c:	42ab      	cmp	r3, r5
 800028e:	f240 8120 	bls.w	80004d2 <__udivmoddi4+0x2a6>
 8000292:	f1a8 0802 	sub.w	r8, r8, #2
 8000296:	443d      	add	r5, r7
 8000298:	1aed      	subs	r5, r5, r3
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a0:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a8:	fb00 f909 	mul.w	r9, r0, r9
 80002ac:	45a1      	cmp	r9, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x98>
 80002b0:	19e4      	adds	r4, r4, r7
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 810a 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80002ba:	45a1      	cmp	r9, r4
 80002bc:	f240 8107 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	eba4 0409 	sub.w	r4, r4, r9
 80002c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002cc:	2100      	movs	r1, #0
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d061      	beq.n	8000396 <__udivmoddi4+0x16a>
 80002d2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002d6:	2300      	movs	r3, #0
 80002d8:	6034      	str	r4, [r6, #0]
 80002da:	6073      	str	r3, [r6, #4]
 80002dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xc8>
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d054      	beq.n	8000392 <__udivmoddi4+0x166>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	f040 808e 	bne.w	800041a <__udivmoddi4+0x1ee>
 80002fe:	42ab      	cmp	r3, r5
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xdc>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2d0>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb65 0503 	sbc.w	r5, r5, r3
 800030e:	2001      	movs	r0, #1
 8000310:	46ac      	mov	ip, r5
 8000312:	2e00      	cmp	r6, #0
 8000314:	d03f      	beq.n	8000396 <__udivmoddi4+0x16a>
 8000316:	e886 1010 	stmia.w	r6, {r4, ip}
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b912      	cbnz	r2, 8000326 <__udivmoddi4+0xfa>
 8000320:	2701      	movs	r7, #1
 8000322:	fbb7 f7f2 	udiv	r7, r7, r2
 8000326:	fab7 fe87 	clz	lr, r7
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d134      	bne.n	800039a <__udivmoddi4+0x16e>
 8000330:	1beb      	subs	r3, r5, r7
 8000332:	0c3a      	lsrs	r2, r7, #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb3 f8f2 	udiv	r8, r3, r2
 800033e:	0c25      	lsrs	r5, r4, #16
 8000340:	fb02 3318 	mls	r3, r2, r8, r3
 8000344:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000348:	fb0c f308 	mul.w	r3, ip, r8
 800034c:	42ab      	cmp	r3, r5
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x134>
 8000350:	19ed      	adds	r5, r5, r7
 8000352:	f108 30ff 	add.w	r0, r8, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x132>
 8000358:	42ab      	cmp	r3, r5
 800035a:	f200 80d1 	bhi.w	8000500 <__udivmoddi4+0x2d4>
 800035e:	4680      	mov	r8, r0
 8000360:	1aed      	subs	r5, r5, r3
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb5 f0f2 	udiv	r0, r5, r2
 8000368:	fb02 5510 	mls	r5, r2, r0, r5
 800036c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000370:	fb0c fc00 	mul.w	ip, ip, r0
 8000374:	45a4      	cmp	ip, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x15c>
 8000378:	19e4      	adds	r4, r4, r7
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x15a>
 8000380:	45a4      	cmp	ip, r4
 8000382:	f200 80b8 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 040c 	sub.w	r4, r4, ip
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	e79d      	b.n	80002ce <__udivmoddi4+0xa2>
 8000392:	4631      	mov	r1, r6
 8000394:	4630      	mov	r0, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	f1ce 0420 	rsb	r4, lr, #32
 800039e:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003a6:	fa20 f804 	lsr.w	r8, r0, r4
 80003aa:	0c3a      	lsrs	r2, r7, #16
 80003ac:	fa25 f404 	lsr.w	r4, r5, r4
 80003b0:	ea48 0803 	orr.w	r8, r8, r3
 80003b4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003bc:	fb02 4411 	mls	r4, r2, r1, r4
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c8:	fb01 f30c 	mul.w	r3, r1, ip
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1bc>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003da:	f080 808a 	bcs.w	80004f2 <__udivmoddi4+0x2c6>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	f240 8087 	bls.w	80004f2 <__udivmoddi4+0x2c6>
 80003e4:	3902      	subs	r1, #2
 80003e6:	443d      	add	r5, r7
 80003e8:	1aeb      	subs	r3, r5, r3
 80003ea:	fa1f f588 	uxth.w	r5, r8
 80003ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f2:	fb02 3310 	mls	r3, r2, r0, r3
 80003f6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fa:	fb00 f30c 	mul.w	r3, r0, ip
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1e6>
 8000402:	19ed      	adds	r5, r5, r7
 8000404:	f100 38ff 	add.w	r8, r0, #4294967295
 8000408:	d26f      	bcs.n	80004ea <__udivmoddi4+0x2be>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d96d      	bls.n	80004ea <__udivmoddi4+0x2be>
 800040e:	3802      	subs	r0, #2
 8000410:	443d      	add	r5, r7
 8000412:	1aeb      	subs	r3, r5, r3
 8000414:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000418:	e78f      	b.n	800033a <__udivmoddi4+0x10e>
 800041a:	f1c1 0720 	rsb	r7, r1, #32
 800041e:	fa22 f807 	lsr.w	r8, r2, r7
 8000422:	408b      	lsls	r3, r1
 8000424:	fa05 f401 	lsl.w	r4, r5, r1
 8000428:	ea48 0303 	orr.w	r3, r8, r3
 800042c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000430:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000434:	40fd      	lsrs	r5, r7
 8000436:	ea4e 0e04 	orr.w	lr, lr, r4
 800043a:	fbb5 f9fc 	udiv	r9, r5, ip
 800043e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000442:	fb0c 5519 	mls	r5, ip, r9, r5
 8000446:	fa1f f883 	uxth.w	r8, r3
 800044a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800044e:	fb09 f408 	mul.w	r4, r9, r8
 8000452:	42ac      	cmp	r4, r5
 8000454:	fa02 f201 	lsl.w	r2, r2, r1
 8000458:	fa00 fa01 	lsl.w	sl, r0, r1
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x244>
 800045e:	18ed      	adds	r5, r5, r3
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d243      	bcs.n	80004ee <__udivmoddi4+0x2c2>
 8000466:	42ac      	cmp	r4, r5
 8000468:	d941      	bls.n	80004ee <__udivmoddi4+0x2c2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	441d      	add	r5, r3
 8000470:	1b2d      	subs	r5, r5, r4
 8000472:	fa1f fe8e 	uxth.w	lr, lr
 8000476:	fbb5 f0fc 	udiv	r0, r5, ip
 800047a:	fb0c 5510 	mls	r5, ip, r0, r5
 800047e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45a0      	cmp	r8, r4
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x26e>
 800048a:	18e4      	adds	r4, r4, r3
 800048c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000490:	d229      	bcs.n	80004e6 <__udivmoddi4+0x2ba>
 8000492:	45a0      	cmp	r8, r4
 8000494:	d927      	bls.n	80004e6 <__udivmoddi4+0x2ba>
 8000496:	3802      	subs	r0, #2
 8000498:	441c      	add	r4, r3
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba4 0408 	sub.w	r4, r4, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	464d      	mov	r5, r9
 80004ac:	d315      	bcc.n	80004da <__udivmoddi4+0x2ae>
 80004ae:	d012      	beq.n	80004d6 <__udivmoddi4+0x2aa>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x29c>
 80004b2:	ebba 030e 	subs.w	r3, sl, lr
 80004b6:	eb64 0405 	sbc.w	r4, r4, r5
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40cb      	lsrs	r3, r1
 80004c0:	431f      	orrs	r7, r3
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	6037      	str	r7, [r6, #0]
 80004c6:	6074      	str	r4, [r6, #4]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	4618      	mov	r0, r3
 80004d0:	e6f8      	b.n	80002c4 <__udivmoddi4+0x98>
 80004d2:	4690      	mov	r8, r2
 80004d4:	e6e0      	b.n	8000298 <__udivmoddi4+0x6c>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2ea      	bcs.n	80004b0 <__udivmoddi4+0x284>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb69 0503 	sbc.w	r5, r9, r3
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7e4      	b.n	80004b0 <__udivmoddi4+0x284>
 80004e6:	4628      	mov	r0, r5
 80004e8:	e7d7      	b.n	800049a <__udivmoddi4+0x26e>
 80004ea:	4640      	mov	r0, r8
 80004ec:	e791      	b.n	8000412 <__udivmoddi4+0x1e6>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e7be      	b.n	8000470 <__udivmoddi4+0x244>
 80004f2:	4601      	mov	r1, r0
 80004f4:	e778      	b.n	80003e8 <__udivmoddi4+0x1bc>
 80004f6:	3802      	subs	r0, #2
 80004f8:	443c      	add	r4, r7
 80004fa:	e745      	b.n	8000388 <__udivmoddi4+0x15c>
 80004fc:	4608      	mov	r0, r1
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xe6>
 8000500:	f1a8 0802 	sub.w	r8, r8, #2
 8000504:	443d      	add	r5, r7
 8000506:	e72b      	b.n	8000360 <__udivmoddi4+0x134>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_InitTick+0x3c>)
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_InitTick+0x40>)
{
 8000512:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	7818      	ldrb	r0, [r3, #0]
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f0 	udiv	r3, r3, r0
 800051e:	6810      	ldr	r0, [r2, #0]
 8000520:	fbb0 f0f3 	udiv	r0, r0, r3
 8000524:	f000 f89c 	bl	8000660 <HAL_SYSTICK_Config>
 8000528:	4604      	mov	r4, r0
 800052a:	b958      	cbnz	r0, 8000544 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052c:	2d0f      	cmp	r5, #15
 800052e:	d809      	bhi.n	8000544 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000530:	4602      	mov	r2, r0
 8000532:	4629      	mov	r1, r5
 8000534:	f04f 30ff 	mov.w	r0, #4294967295
 8000538:	f000 f85e 	bl	80005f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_InitTick+0x44>)
 800053e:	4620      	mov	r0, r4
 8000540:	601d      	str	r5, [r3, #0]
 8000542:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000544:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000546:	bd38      	pop	{r3, r4, r5, pc}
 8000548:	20000008 	.word	0x20000008
 800054c:	20000000 	.word	0x20000000
 8000550:	20000004 	.word	0x20000004

08000554 <HAL_Init>:
{
 8000554:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <HAL_Init+0x30>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800055e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800056e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 f82f 	bl	80005d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff ffc8 	bl	800050c <HAL_InitTick>
  HAL_MspInit();
 800057c:	f002 fa22 	bl	80029c4 <HAL_MspInit>
}
 8000580:	2000      	movs	r0, #0
 8000582:	bd08      	pop	{r3, pc}
 8000584:	40023c00 	.word	0x40023c00

08000588 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <HAL_IncTick+0x10>)
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <HAL_IncTick+0x14>)
 800058c:	6811      	ldr	r1, [r2, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	440b      	add	r3, r1
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000074 	.word	0x20000074
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a0:	4b01      	ldr	r3, [pc, #4]	; (80005a8 <HAL_GetTick+0x8>)
 80005a2:	6818      	ldr	r0, [r3, #0]
}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000074 	.word	0x20000074

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b538      	push	{r3, r4, r5, lr}
 80005ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff fff6 	bl	80005a0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005b6:	bf1c      	itt	ne
 80005b8:	4b05      	ldrne	r3, [pc, #20]	; (80005d0 <HAL_Delay+0x24>)
 80005ba:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005bc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005be:	bf18      	it	ne
 80005c0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005c2:	f7ff ffed 	bl	80005a0 <HAL_GetTick>
 80005c6:	1b40      	subs	r0, r0, r5
 80005c8:	4284      	cmp	r4, r0
 80005ca:	d8fa      	bhi.n	80005c2 <HAL_Delay+0x16>
  {
  }
}
 80005cc:	bd38      	pop	{r3, r4, r5, pc}
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000

080005d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	0c1b      	lsrs	r3, r3, #16
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005e4:	0200      	lsls	r0, r0, #8
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005f0:	60d3      	str	r3, [r2, #12]
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	68dc      	ldr	r4, [r3, #12]
 80005fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000602:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000606:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000608:	2b04      	cmp	r3, #4
 800060a:	bf28      	it	cs
 800060c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	f04f 0501 	mov.w	r5, #1
 8000614:	fa05 f303 	lsl.w	r3, r5, r3
 8000618:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061c:	bf8c      	ite	hi
 800061e:	3c03      	subhi	r4, #3
 8000620:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000622:	4019      	ands	r1, r3
 8000624:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000626:	fa05 f404 	lsl.w	r4, r5, r4
 800062a:	3c01      	subs	r4, #1
 800062c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800062e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	ea42 0201 	orr.w	r2, r2, r1
 8000634:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	bfaf      	iteee	ge
 800063a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	f000 000f 	andlt.w	r0, r0, #15
 8000642:	4b06      	ldrlt	r3, [pc, #24]	; (800065c <HAL_NVIC_SetPriority+0x64>)
 8000644:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	bfa5      	ittet	ge
 8000648:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800064c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00
 800065c:	e000ed14 	.word	0xe000ed14

08000660 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000660:	3801      	subs	r0, #1
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000666:	d20a      	bcs.n	800067e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800066c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	21f0      	movs	r1, #240	; 0xf0
 8000670:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000676:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000678:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800067e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e010 	.word	0xe000e010
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000690:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000692:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000694:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800085c <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000698:	4a6e      	ldr	r2, [pc, #440]	; (8000854 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800069a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000860 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006a0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006a2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006a8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ac:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006b0:	45b6      	cmp	lr, r6
 80006b2:	f040 80b6 	bne.w	8000822 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b6:	684c      	ldr	r4, [r1, #4]
 80006b8:	f024 0710 	bic.w	r7, r4, #16
 80006bc:	2f02      	cmp	r7, #2
 80006be:	d116      	bne.n	80006ee <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006c0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006c4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006c8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006cc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006d4:	f04f 0c0f 	mov.w	ip, #15
 80006d8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006dc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006e0:	690d      	ldr	r5, [r1, #16]
 80006e2:	fa05 f50b 	lsl.w	r5, r5, fp
 80006e6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006ea:	f8ca 5020 	str.w	r5, [sl, #32]
 80006ee:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006f4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f8:	fa05 f50a 	lsl.w	r5, r5, sl
 80006fc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006fe:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000702:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000706:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800070a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000710:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000712:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000716:	d811      	bhi.n	800073c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000718:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800071a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800071e:	68cf      	ldr	r7, [r1, #12]
 8000720:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000724:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000728:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800072a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800072c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000730:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000734:	409f      	lsls	r7, r3
 8000736:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800073a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800073c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800073e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000740:	688f      	ldr	r7, [r1, #8]
 8000742:	fa07 f70a 	lsl.w	r7, r7, sl
 8000746:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000748:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800074a:	00e5      	lsls	r5, r4, #3
 800074c:	d569      	bpl.n	8000822 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	f04f 0b00 	mov.w	fp, #0
 8000752:	f8cd b00c 	str.w	fp, [sp, #12]
 8000756:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800075a:	4d3f      	ldr	r5, [pc, #252]	; (8000858 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000760:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000764:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000768:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800076c:	9703      	str	r7, [sp, #12]
 800076e:	9f03      	ldr	r7, [sp, #12]
 8000770:	f023 0703 	bic.w	r7, r3, #3
 8000774:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000778:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800077c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000780:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000784:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000788:	f04f 0e0f 	mov.w	lr, #15
 800078c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000790:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000792:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000796:	d04b      	beq.n	8000830 <HAL_GPIO_Init+0x1a4>
 8000798:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079c:	42a8      	cmp	r0, r5
 800079e:	d049      	beq.n	8000834 <HAL_GPIO_Init+0x1a8>
 80007a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a4:	42a8      	cmp	r0, r5
 80007a6:	d047      	beq.n	8000838 <HAL_GPIO_Init+0x1ac>
 80007a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ac:	42a8      	cmp	r0, r5
 80007ae:	d045      	beq.n	800083c <HAL_GPIO_Init+0x1b0>
 80007b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d043      	beq.n	8000840 <HAL_GPIO_Init+0x1b4>
 80007b8:	4548      	cmp	r0, r9
 80007ba:	d043      	beq.n	8000844 <HAL_GPIO_Init+0x1b8>
 80007bc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007c0:	42a8      	cmp	r0, r5
 80007c2:	d041      	beq.n	8000848 <HAL_GPIO_Init+0x1bc>
 80007c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d03f      	beq.n	800084c <HAL_GPIO_Init+0x1c0>
 80007cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	d03d      	beq.n	8000850 <HAL_GPIO_Init+0x1c4>
 80007d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d8:	42a8      	cmp	r0, r5
 80007da:	bf14      	ite	ne
 80007dc:	250a      	movne	r5, #10
 80007de:	2509      	moveq	r5, #9
 80007e0:	fa05 f50c 	lsl.w	r5, r5, ip
 80007e4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007e8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007ea:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ec:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007ee:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007f2:	bf0c      	ite	eq
 80007f4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007f6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007f8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007fa:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007fc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000800:	bf0c      	ite	eq
 8000802:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000804:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000806:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000808:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800080a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800080e:	bf0c      	ite	eq
 8000810:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000812:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000814:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000816:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000818:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800081a:	bf54      	ite	pl
 800081c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800081e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000820:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000822:	3301      	adds	r3, #1
 8000824:	2b10      	cmp	r3, #16
 8000826:	f47f af3c 	bne.w	80006a2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800082a:	b005      	add	sp, #20
 800082c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000830:	465d      	mov	r5, fp
 8000832:	e7d5      	b.n	80007e0 <HAL_GPIO_Init+0x154>
 8000834:	2501      	movs	r5, #1
 8000836:	e7d3      	b.n	80007e0 <HAL_GPIO_Init+0x154>
 8000838:	2502      	movs	r5, #2
 800083a:	e7d1      	b.n	80007e0 <HAL_GPIO_Init+0x154>
 800083c:	2503      	movs	r5, #3
 800083e:	e7cf      	b.n	80007e0 <HAL_GPIO_Init+0x154>
 8000840:	2504      	movs	r5, #4
 8000842:	e7cd      	b.n	80007e0 <HAL_GPIO_Init+0x154>
 8000844:	2505      	movs	r5, #5
 8000846:	e7cb      	b.n	80007e0 <HAL_GPIO_Init+0x154>
 8000848:	2506      	movs	r5, #6
 800084a:	e7c9      	b.n	80007e0 <HAL_GPIO_Init+0x154>
 800084c:	2507      	movs	r5, #7
 800084e:	e7c7      	b.n	80007e0 <HAL_GPIO_Init+0x154>
 8000850:	2508      	movs	r5, #8
 8000852:	e7c5      	b.n	80007e0 <HAL_GPIO_Init+0x154>
 8000854:	40013c00 	.word	0x40013c00
 8000858:	40020000 	.word	0x40020000
 800085c:	40023800 	.word	0x40023800
 8000860:	40021400 	.word	0x40021400

08000864 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000864:	b10a      	cbz	r2, 800086a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000866:	6181      	str	r1, [r0, #24]
 8000868:	4770      	bx	lr
 800086a:	0409      	lsls	r1, r1, #16
 800086c:	e7fb      	b.n	8000866 <HAL_GPIO_WritePin+0x2>
	...

08000870 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000870:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000878:	4c18      	ldr	r4, [pc, #96]	; (80008dc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000880:	641a      	str	r2, [r3, #64]	; 0x40
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_PWREx_EnableOverDrive+0x70>)
 800088e:	2201      	movs	r2, #1
 8000890:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000892:	f7ff fe85 	bl	80005a0 <HAL_GetTick>
 8000896:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000898:	6863      	ldr	r3, [r4, #4]
 800089a:	03da      	lsls	r2, r3, #15
 800089c:	d50b      	bpl.n	80008b6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008a0:	4c0e      	ldr	r4, [pc, #56]	; (80008dc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008a6:	f7ff fe7b 	bl	80005a0 <HAL_GetTick>
 80008aa:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008ac:	6863      	ldr	r3, [r4, #4]
 80008ae:	039b      	lsls	r3, r3, #14
 80008b0:	d50a      	bpl.n	80008c8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008b2:	2000      	movs	r0, #0
 80008b4:	e006      	b.n	80008c4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008b6:	f7ff fe73 	bl	80005a0 <HAL_GetTick>
 80008ba:	1b40      	subs	r0, r0, r5
 80008bc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008c0:	d9ea      	bls.n	8000898 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008c2:	2003      	movs	r0, #3
}
 80008c4:	b003      	add	sp, #12
 80008c6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008c8:	f7ff fe6a 	bl	80005a0 <HAL_GetTick>
 80008cc:	1b40      	subs	r0, r0, r5
 80008ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008d2:	d9eb      	bls.n	80008ac <HAL_PWREx_EnableOverDrive+0x3c>
 80008d4:	e7f5      	b.n	80008c2 <HAL_PWREx_EnableOverDrive+0x52>
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000
 80008e0:	420e0040 	.word	0x420e0040
 80008e4:	420e0044 	.word	0x420e0044

080008e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008ec:	4604      	mov	r4, r0
 80008ee:	b918      	cbnz	r0, 80008f8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008f0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008f2:	b002      	add	sp, #8
 80008f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f8:	6803      	ldr	r3, [r0, #0]
 80008fa:	07dd      	lsls	r5, r3, #31
 80008fc:	d410      	bmi.n	8000920 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008fe:	6823      	ldr	r3, [r4, #0]
 8000900:	0798      	lsls	r0, r3, #30
 8000902:	d458      	bmi.n	80009b6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	071a      	lsls	r2, r3, #28
 8000908:	f100 809a 	bmi.w	8000a40 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	075b      	lsls	r3, r3, #29
 8000910:	f100 80b8 	bmi.w	8000a84 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000914:	69a2      	ldr	r2, [r4, #24]
 8000916:	2a00      	cmp	r2, #0
 8000918:	f040 8119 	bne.w	8000b4e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800091c:	2000      	movs	r0, #0
 800091e:	e7e8      	b.n	80008f2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000920:	4ba6      	ldr	r3, [pc, #664]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
 8000922:	689a      	ldr	r2, [r3, #8]
 8000924:	f002 020c 	and.w	r2, r2, #12
 8000928:	2a04      	cmp	r2, #4
 800092a:	d007      	beq.n	800093c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000932:	2a08      	cmp	r2, #8
 8000934:	d10a      	bne.n	800094c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	0259      	lsls	r1, r3, #9
 800093a:	d507      	bpl.n	800094c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800093c:	4b9f      	ldr	r3, [pc, #636]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	039a      	lsls	r2, r3, #14
 8000942:	d5dc      	bpl.n	80008fe <HAL_RCC_OscConfig+0x16>
 8000944:	6863      	ldr	r3, [r4, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1d9      	bne.n	80008fe <HAL_RCC_OscConfig+0x16>
 800094a:	e7d1      	b.n	80008f0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	4d9b      	ldr	r5, [pc, #620]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
 8000950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000954:	d111      	bne.n	800097a <HAL_RCC_OscConfig+0x92>
 8000956:	682b      	ldr	r3, [r5, #0]
 8000958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800095c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800095e:	f7ff fe1f 	bl	80005a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000962:	4d96      	ldr	r5, [pc, #600]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000964:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000966:	682b      	ldr	r3, [r5, #0]
 8000968:	039b      	lsls	r3, r3, #14
 800096a:	d4c8      	bmi.n	80008fe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800096c:	f7ff fe18 	bl	80005a0 <HAL_GetTick>
 8000970:	1b80      	subs	r0, r0, r6
 8000972:	2864      	cmp	r0, #100	; 0x64
 8000974:	d9f7      	bls.n	8000966 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000976:	2003      	movs	r0, #3
 8000978:	e7bb      	b.n	80008f2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800097a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800097e:	d104      	bne.n	800098a <HAL_RCC_OscConfig+0xa2>
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000986:	602b      	str	r3, [r5, #0]
 8000988:	e7e5      	b.n	8000956 <HAL_RCC_OscConfig+0x6e>
 800098a:	682a      	ldr	r2, [r5, #0]
 800098c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000990:	602a      	str	r2, [r5, #0]
 8000992:	682a      	ldr	r2, [r5, #0]
 8000994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000998:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1df      	bne.n	800095e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800099e:	f7ff fdff 	bl	80005a0 <HAL_GetTick>
 80009a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009a4:	682b      	ldr	r3, [r5, #0]
 80009a6:	039f      	lsls	r7, r3, #14
 80009a8:	d5a9      	bpl.n	80008fe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009aa:	f7ff fdf9 	bl	80005a0 <HAL_GetTick>
 80009ae:	1b80      	subs	r0, r0, r6
 80009b0:	2864      	cmp	r0, #100	; 0x64
 80009b2:	d9f7      	bls.n	80009a4 <HAL_RCC_OscConfig+0xbc>
 80009b4:	e7df      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b6:	4b81      	ldr	r3, [pc, #516]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	f012 0f0c 	tst.w	r2, #12
 80009be:	d007      	beq.n	80009d0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009c6:	2a08      	cmp	r2, #8
 80009c8:	d111      	bne.n	80009ee <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	025e      	lsls	r6, r3, #9
 80009ce:	d40e      	bmi.n	80009ee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d0:	4b7a      	ldr	r3, [pc, #488]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	0795      	lsls	r5, r2, #30
 80009d6:	d502      	bpl.n	80009de <HAL_RCC_OscConfig+0xf6>
 80009d8:	68e2      	ldr	r2, [r4, #12]
 80009da:	2a01      	cmp	r2, #1
 80009dc:	d188      	bne.n	80008f0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	6921      	ldr	r1, [r4, #16]
 80009e2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009e6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ec:	e78a      	b.n	8000904 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009ee:	68e2      	ldr	r2, [r4, #12]
 80009f0:	4b73      	ldr	r3, [pc, #460]	; (8000bc0 <HAL_RCC_OscConfig+0x2d8>)
 80009f2:	b1b2      	cbz	r2, 8000a22 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009f4:	2201      	movs	r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f8:	f7ff fdd2 	bl	80005a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009fc:	4d6f      	ldr	r5, [pc, #444]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	0798      	lsls	r0, r3, #30
 8000a04:	d507      	bpl.n	8000a16 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a06:	682b      	ldr	r3, [r5, #0]
 8000a08:	6922      	ldr	r2, [r4, #16]
 8000a0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a12:	602b      	str	r3, [r5, #0]
 8000a14:	e776      	b.n	8000904 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a16:	f7ff fdc3 	bl	80005a0 <HAL_GetTick>
 8000a1a:	1b80      	subs	r0, r0, r6
 8000a1c:	2802      	cmp	r0, #2
 8000a1e:	d9ef      	bls.n	8000a00 <HAL_RCC_OscConfig+0x118>
 8000a20:	e7a9      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a24:	f7ff fdbc 	bl	80005a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a28:	4d64      	ldr	r5, [pc, #400]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	0799      	lsls	r1, r3, #30
 8000a30:	f57f af68 	bpl.w	8000904 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a34:	f7ff fdb4 	bl	80005a0 <HAL_GetTick>
 8000a38:	1b80      	subs	r0, r0, r6
 8000a3a:	2802      	cmp	r0, #2
 8000a3c:	d9f6      	bls.n	8000a2c <HAL_RCC_OscConfig+0x144>
 8000a3e:	e79a      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a40:	6962      	ldr	r2, [r4, #20]
 8000a42:	4b60      	ldr	r3, [pc, #384]	; (8000bc4 <HAL_RCC_OscConfig+0x2dc>)
 8000a44:	b17a      	cbz	r2, 8000a66 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a4a:	f7ff fda9 	bl	80005a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4e:	4d5b      	ldr	r5, [pc, #364]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a50:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a54:	079f      	lsls	r7, r3, #30
 8000a56:	f53f af59 	bmi.w	800090c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a5a:	f7ff fda1 	bl	80005a0 <HAL_GetTick>
 8000a5e:	1b80      	subs	r0, r0, r6
 8000a60:	2802      	cmp	r0, #2
 8000a62:	d9f6      	bls.n	8000a52 <HAL_RCC_OscConfig+0x16a>
 8000a64:	e787      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a66:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a68:	f7ff fd9a 	bl	80005a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6c:	4d53      	ldr	r5, [pc, #332]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a6e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a72:	0798      	lsls	r0, r3, #30
 8000a74:	f57f af4a 	bpl.w	800090c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a78:	f7ff fd92 	bl	80005a0 <HAL_GetTick>
 8000a7c:	1b80      	subs	r0, r0, r6
 8000a7e:	2802      	cmp	r0, #2
 8000a80:	d9f6      	bls.n	8000a70 <HAL_RCC_OscConfig+0x188>
 8000a82:	e778      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a84:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
 8000a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a88:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a8c:	d128      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	9201      	str	r2, [sp, #4]
 8000a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a96:	641a      	str	r2, [r3, #64]	; 0x40
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000aa2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa4:	4d48      	ldr	r5, [pc, #288]	; (8000bc8 <HAL_RCC_OscConfig+0x2e0>)
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	05d9      	lsls	r1, r3, #23
 8000aaa:	d51b      	bpl.n	8000ae4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aac:	68a3      	ldr	r3, [r4, #8]
 8000aae:	4d43      	ldr	r5, [pc, #268]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d127      	bne.n	8000b04 <HAL_RCC_OscConfig+0x21c>
 8000ab4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000abc:	f7ff fd70 	bl	80005a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac0:	4d3e      	ldr	r5, [pc, #248]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ac2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aca:	079b      	lsls	r3, r3, #30
 8000acc:	d539      	bpl.n	8000b42 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f43f af20 	beq.w	8000914 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad4:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
 8000ad6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	e719      	b.n	8000914 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	e7df      	b.n	8000aa4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000aec:	f7ff fd58 	bl	80005a0 <HAL_GetTick>
 8000af0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af2:	682b      	ldr	r3, [r5, #0]
 8000af4:	05da      	lsls	r2, r3, #23
 8000af6:	d4d9      	bmi.n	8000aac <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000af8:	f7ff fd52 	bl	80005a0 <HAL_GetTick>
 8000afc:	1bc0      	subs	r0, r0, r7
 8000afe:	2802      	cmp	r0, #2
 8000b00:	d9f7      	bls.n	8000af2 <HAL_RCC_OscConfig+0x20a>
 8000b02:	e738      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b04:	2b05      	cmp	r3, #5
 8000b06:	d104      	bne.n	8000b12 <HAL_RCC_OscConfig+0x22a>
 8000b08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	672b      	str	r3, [r5, #112]	; 0x70
 8000b10:	e7d0      	b.n	8000ab4 <HAL_RCC_OscConfig+0x1cc>
 8000b12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b14:	f022 0201 	bic.w	r2, r2, #1
 8000b18:	672a      	str	r2, [r5, #112]	; 0x70
 8000b1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b1c:	f022 0204 	bic.w	r2, r2, #4
 8000b20:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1ca      	bne.n	8000abc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b26:	f7ff fd3b 	bl	80005a0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b2e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b32:	0798      	lsls	r0, r3, #30
 8000b34:	d5cb      	bpl.n	8000ace <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b36:	f7ff fd33 	bl	80005a0 <HAL_GetTick>
 8000b3a:	1bc0      	subs	r0, r0, r7
 8000b3c:	4540      	cmp	r0, r8
 8000b3e:	d9f7      	bls.n	8000b30 <HAL_RCC_OscConfig+0x248>
 8000b40:	e719      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b42:	f7ff fd2d 	bl	80005a0 <HAL_GetTick>
 8000b46:	1bc0      	subs	r0, r0, r7
 8000b48:	4540      	cmp	r0, r8
 8000b4a:	d9bd      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x1e0>
 8000b4c:	e713      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b4e:	4d1b      	ldr	r5, [pc, #108]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
 8000b50:	68ab      	ldr	r3, [r5, #8]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	2b08      	cmp	r3, #8
 8000b58:	f43f aeca 	beq.w	80008f0 <HAL_RCC_OscConfig+0x8>
 8000b5c:	4e1b      	ldr	r6, [pc, #108]	; (8000bcc <HAL_RCC_OscConfig+0x2e4>)
 8000b5e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b60:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b62:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b64:	d134      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b66:	f7ff fd1b 	bl	80005a0 <HAL_GetTick>
 8000b6a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b6c:	682b      	ldr	r3, [r5, #0]
 8000b6e:	0199      	lsls	r1, r3, #6
 8000b70:	d41e      	bmi.n	8000bb0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b72:	6a22      	ldr	r2, [r4, #32]
 8000b74:	69e3      	ldr	r3, [r4, #28]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b7a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b86:	4c0d      	ldr	r4, [pc, #52]	; (8000bbc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b88:	0852      	lsrs	r2, r2, #1
 8000b8a:	3a01      	subs	r2, #1
 8000b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b90:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b92:	2301      	movs	r3, #1
 8000b94:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b96:	f7ff fd03 	bl	80005a0 <HAL_GetTick>
 8000b9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	019a      	lsls	r2, r3, #6
 8000ba0:	f53f aebc 	bmi.w	800091c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba4:	f7ff fcfc 	bl	80005a0 <HAL_GetTick>
 8000ba8:	1b40      	subs	r0, r0, r5
 8000baa:	2802      	cmp	r0, #2
 8000bac:	d9f6      	bls.n	8000b9c <HAL_RCC_OscConfig+0x2b4>
 8000bae:	e6e2      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb0:	f7ff fcf6 	bl	80005a0 <HAL_GetTick>
 8000bb4:	1bc0      	subs	r0, r0, r7
 8000bb6:	2802      	cmp	r0, #2
 8000bb8:	d9d8      	bls.n	8000b6c <HAL_RCC_OscConfig+0x284>
 8000bba:	e6dc      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	42470000 	.word	0x42470000
 8000bc4:	42470e80 	.word	0x42470e80
 8000bc8:	40007000 	.word	0x40007000
 8000bcc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fce6 	bl	80005a0 <HAL_GetTick>
 8000bd4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bd6:	682b      	ldr	r3, [r5, #0]
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	f57f ae9f 	bpl.w	800091c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bde:	f7ff fcdf 	bl	80005a0 <HAL_GetTick>
 8000be2:	1b00      	subs	r0, r0, r4
 8000be4:	2802      	cmp	r0, #2
 8000be6:	d9f6      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x2ee>
 8000be8:	e6c5      	b.n	8000976 <HAL_RCC_OscConfig+0x8e>
 8000bea:	bf00      	nop

08000bec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bec:	4913      	ldr	r1, [pc, #76]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bf0:	688b      	ldr	r3, [r1, #8]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d003      	beq.n	8000c02 <HAL_RCC_GetSysClockFreq+0x16>
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d003      	beq.n	8000c06 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bfe:	4810      	ldr	r0, [pc, #64]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c00:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c04:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c08:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c10:	bf14      	ite	ne
 8000c12:	480c      	ldrne	r0, [pc, #48]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c14:	480a      	ldreq	r0, [pc, #40]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c16:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c1a:	bf18      	it	ne
 8000c1c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c22:	fba1 0100 	umull	r0, r1, r1, r0
 8000c26:	f7ff fae9 	bl	80001fc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c32:	3301      	adds	r3, #1
 8000c34:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c3a:	bd08      	pop	{r3, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	00f42400 	.word	0x00f42400
 8000c44:	017d7840 	.word	0x017d7840

08000c48 <HAL_RCC_ClockConfig>:
{
 8000c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c4e:	4604      	mov	r4, r0
 8000c50:	b910      	cbnz	r0, 8000c58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c52:	2001      	movs	r0, #1
 8000c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c58:	4b44      	ldr	r3, [pc, #272]	; (8000d6c <HAL_RCC_ClockConfig+0x124>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	f002 020f 	and.w	r2, r2, #15
 8000c60:	428a      	cmp	r2, r1
 8000c62:	d328      	bcc.n	8000cb6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c64:	6821      	ldr	r1, [r4, #0]
 8000c66:	078f      	lsls	r7, r1, #30
 8000c68:	d42d      	bmi.n	8000cc6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c6a:	07c8      	lsls	r0, r1, #31
 8000c6c:	d440      	bmi.n	8000cf0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c6e:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <HAL_RCC_ClockConfig+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	f002 020f 	and.w	r2, r2, #15
 8000c76:	4295      	cmp	r5, r2
 8000c78:	d366      	bcc.n	8000d48 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c7a:	6822      	ldr	r2, [r4, #0]
 8000c7c:	0751      	lsls	r1, r2, #29
 8000c7e:	d46c      	bmi.n	8000d5a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c80:	0713      	lsls	r3, r2, #28
 8000c82:	d507      	bpl.n	8000c94 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c84:	4a3a      	ldr	r2, [pc, #232]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000c86:	6921      	ldr	r1, [r4, #16]
 8000c88:	6893      	ldr	r3, [r2, #8]
 8000c8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c94:	f7ff ffaa 	bl	8000bec <HAL_RCC_GetSysClockFreq>
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000c9a:	4a36      	ldr	r2, [pc, #216]	; (8000d74 <HAL_RCC_ClockConfig+0x12c>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	40d8      	lsrs	r0, r3
 8000ca6:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <HAL_RCC_ClockConfig+0x130>)
 8000ca8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fc2e 	bl	800050c <HAL_InitTick>
  return HAL_OK;
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb6:	b2ca      	uxtb	r2, r1
 8000cb8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d1c6      	bne.n	8000c52 <HAL_RCC_ClockConfig+0xa>
 8000cc4:	e7ce      	b.n	8000c64 <HAL_RCC_ClockConfig+0x1c>
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ccc:	bf1e      	ittt	ne
 8000cce:	689a      	ldrne	r2, [r3, #8]
 8000cd0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cd4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cd8:	bf42      	ittt	mi
 8000cda:	689a      	ldrmi	r2, [r3, #8]
 8000cdc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ce0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	68a0      	ldr	r0, [r4, #8]
 8000ce6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cea:	4302      	orrs	r2, r0
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	e7bc      	b.n	8000c6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf0:	6862      	ldr	r2, [r4, #4]
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000cf4:	2a01      	cmp	r2, #1
 8000cf6:	d11d      	bne.n	8000d34 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfe:	d0a8      	beq.n	8000c52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d00:	4e1b      	ldr	r6, [pc, #108]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000d02:	68b3      	ldr	r3, [r6, #8]
 8000d04:	f023 0303 	bic.w	r3, r3, #3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d0c:	f7ff fc48 	bl	80005a0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d10:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d14:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d16:	68b3      	ldr	r3, [r6, #8]
 8000d18:	6862      	ldr	r2, [r4, #4]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d22:	d0a4      	beq.n	8000c6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d24:	f7ff fc3c 	bl	80005a0 <HAL_GetTick>
 8000d28:	1bc0      	subs	r0, r0, r7
 8000d2a:	4540      	cmp	r0, r8
 8000d2c:	d9f3      	bls.n	8000d16 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d2e:	2003      	movs	r0, #3
}
 8000d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d34:	1e91      	subs	r1, r2, #2
 8000d36:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d38:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d3a:	d802      	bhi.n	8000d42 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d3c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d40:	e7dd      	b.n	8000cfe <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d42:	f013 0f02 	tst.w	r3, #2
 8000d46:	e7da      	b.n	8000cfe <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d48:	b2ea      	uxtb	r2, r5
 8000d4a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	429d      	cmp	r5, r3
 8000d54:	f47f af7d 	bne.w	8000c52 <HAL_RCC_ClockConfig+0xa>
 8000d58:	e78f      	b.n	8000c7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d5a:	4905      	ldr	r1, [pc, #20]	; (8000d70 <HAL_RCC_ClockConfig+0x128>)
 8000d5c:	68e0      	ldr	r0, [r4, #12]
 8000d5e:	688b      	ldr	r3, [r1, #8]
 8000d60:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d64:	4303      	orrs	r3, r0
 8000d66:	608b      	str	r3, [r1, #8]
 8000d68:	e78a      	b.n	8000c80 <HAL_RCC_ClockConfig+0x38>
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00
 8000d70:	40023800 	.word	0x40023800
 8000d74:	08002ceb 	.word	0x08002ceb
 8000d78:	20000008 	.word	0x20000008

08000d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d80:	9e06      	ldr	r6, [sp, #24]
 8000d82:	4604      	mov	r4, r0
 8000d84:	4688      	mov	r8, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	6893      	ldr	r3, [r2, #8]
 8000d8e:	ea38 0303 	bics.w	r3, r8, r3
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	d102      	bne.n	8000da2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000d9c:	2000      	movs	r0, #0
}
 8000d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000da2:	1c6b      	adds	r3, r5, #1
 8000da4:	d0f2      	beq.n	8000d8c <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000da6:	bb55      	cbnz	r5, 8000dfe <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000db0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000db2:	6862      	ldr	r2, [r4, #4]
 8000db4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000db8:	d10a      	bne.n	8000dd0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000dba:	68a2      	ldr	r2, [r4, #8]
 8000dbc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dc0:	d002      	beq.n	8000dc8 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000dc2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000dc6:	d103      	bne.n	8000dd0 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dce:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000dd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dd2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000dd6:	d109      	bne.n	8000dec <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dde:	0412      	lsls	r2, r2, #16
 8000de0:	0c12      	lsrs	r2, r2, #16
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000dea:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000df2:	2300      	movs	r3, #0
 8000df4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000df8:	2003      	movs	r0, #3
 8000dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000dfe:	f7ff fbcf 	bl	80005a0 <HAL_GetTick>
 8000e02:	1b80      	subs	r0, r0, r6
 8000e04:	4285      	cmp	r5, r0
 8000e06:	d8c0      	bhi.n	8000d8a <SPI_WaitFlagStateUntilTimeout+0xe>
 8000e08:	e7ce      	b.n	8000da8 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000e0a <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e0a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	2200      	movs	r2, #0
{
 8000e14:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e16:	f7ff ffb1 	bl	8000d7c <SPI_WaitFlagStateUntilTimeout>
 8000e1a:	b120      	cbz	r0, 8000e26 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e1e:	f043 0320 	orr.w	r3, r3, #32
 8000e22:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000e24:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000e26:	b002      	add	sp, #8
 8000e28:	bd10      	pop	{r4, pc}

08000e2a <HAL_SPI_Init>:
{
 8000e2a:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d036      	beq.n	8000ea0 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000e36:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e3e:	b91b      	cbnz	r3, 8000e48 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000e40:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000e44:	f001 fdda 	bl	80029fc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000e48:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e4a:	68a0      	ldr	r0, [r4, #8]
 8000e4c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e54:	680b      	ldr	r3, [r1, #0]
 8000e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e5a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e5c:	6863      	ldr	r3, [r4, #4]
 8000e5e:	4303      	orrs	r3, r0
 8000e60:	68e0      	ldr	r0, [r4, #12]
 8000e62:	4303      	orrs	r3, r0
 8000e64:	6920      	ldr	r0, [r4, #16]
 8000e66:	4303      	orrs	r3, r0
 8000e68:	6960      	ldr	r0, [r4, #20]
 8000e6a:	4303      	orrs	r3, r0
 8000e6c:	69e0      	ldr	r0, [r4, #28]
 8000e6e:	4303      	orrs	r3, r0
 8000e70:	6a20      	ldr	r0, [r4, #32]
 8000e72:	4303      	orrs	r3, r0
 8000e74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e76:	4303      	orrs	r3, r0
 8000e78:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e7c:	4303      	orrs	r3, r0
 8000e7e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e80:	0c12      	lsrs	r2, r2, #16
 8000e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e84:	f002 0204 	and.w	r2, r2, #4
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e8c:	69cb      	ldr	r3, [r1, #28]
 8000e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e92:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e94:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000e96:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e98:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e9a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000e9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ea0:	2001      	movs	r0, #1
}
 8000ea2:	bd10      	pop	{r4, pc}

08000ea4 <HAL_SPI_Transmit>:
{
 8000ea4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000ea8:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000eaa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000eae:	2b01      	cmp	r3, #1
{
 8000eb0:	4604      	mov	r4, r0
 8000eb2:	460d      	mov	r5, r1
 8000eb4:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000eb6:	f000 809c 	beq.w	8000ff2 <HAL_SPI_Transmit+0x14e>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000ec0:	f7ff fb6e 	bl	80005a0 <HAL_GetTick>
 8000ec4:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000ec6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000eca:	b2c0      	uxtb	r0, r0
 8000ecc:	2801      	cmp	r0, #1
 8000ece:	f040 808e 	bne.w	8000fee <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d04e      	beq.n	8000f74 <HAL_SPI_Transmit+0xd0>
 8000ed6:	f1b8 0f00 	cmp.w	r8, #0
 8000eda:	d04b      	beq.n	8000f74 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000ee6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000ee8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000eec:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000eee:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000ef0:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000ef2:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ef4:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000ef6:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000efc:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000efe:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000f02:	bf02      	ittt	eq
 8000f04:	681a      	ldreq	r2, [r3, #0]
 8000f06:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000f0a:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f10:	bf5e      	ittt	pl
 8000f12:	681a      	ldrpl	r2, [r3, #0]
 8000f14:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000f18:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000f1a:	68e2      	ldr	r2, [r4, #12]
 8000f1c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000f20:	6862      	ldr	r2, [r4, #4]
 8000f22:	d138      	bne.n	8000f96 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000f24:	b11a      	cbz	r2, 8000f2e <HAL_SPI_Transmit+0x8a>
 8000f26:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f28:	b292      	uxth	r2, r2
 8000f2a:	2a01      	cmp	r2, #1
 8000f2c:	d106      	bne.n	8000f3c <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000f2e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000f32:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000f34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b993      	cbnz	r3, 8000f68 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000f42:	9700      	str	r7, [sp, #0]
 8000f44:	4633      	mov	r3, r6
 8000f46:	2201      	movs	r2, #1
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f7ff ff16 	bl	8000d7c <SPI_WaitFlagStateUntilTimeout>
 8000f50:	b978      	cbnz	r0, 8000f72 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000f52:	463a      	mov	r2, r7
 8000f54:	4631      	mov	r1, r6
 8000f56:	4620      	mov	r0, r4
 8000f58:	f7ff ff57 	bl	8000e0a <SPI_CheckFlag_BSY>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d038      	beq.n	8000fd2 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f60:	2320      	movs	r3, #32
 8000f62:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000f64:	2001      	movs	r0, #1
    goto error;
 8000f66:	e005      	b.n	8000f74 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	0790      	lsls	r0, r2, #30
 8000f6e:	d4de      	bmi.n	8000f2e <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f70:	b94e      	cbnz	r6, 8000f86 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000f72:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000f80:	b004      	add	sp, #16
 8000f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000f86:	1c71      	adds	r1, r6, #1
 8000f88:	d0d8      	beq.n	8000f3c <HAL_SPI_Transmit+0x98>
 8000f8a:	f7ff fb09 	bl	80005a0 <HAL_GetTick>
 8000f8e:	1bc0      	subs	r0, r0, r7
 8000f90:	4286      	cmp	r6, r0
 8000f92:	d8d3      	bhi.n	8000f3c <HAL_SPI_Transmit+0x98>
 8000f94:	e7ed      	b.n	8000f72 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000f96:	b11a      	cbz	r2, 8000fa0 <HAL_SPI_Transmit+0xfc>
 8000f98:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f9a:	b292      	uxth	r2, r2
 8000f9c:	2a01      	cmp	r2, #1
 8000f9e:	d106      	bne.n	8000fae <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000fa0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000fa4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000fa6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000fae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0c5      	beq.n	8000f42 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	0792      	lsls	r2, r2, #30
 8000fbc:	d4f0      	bmi.n	8000fa0 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d0d7      	beq.n	8000f72 <HAL_SPI_Transmit+0xce>
 8000fc2:	1c73      	adds	r3, r6, #1
 8000fc4:	d0f3      	beq.n	8000fae <HAL_SPI_Transmit+0x10a>
 8000fc6:	f7ff faeb 	bl	80005a0 <HAL_GetTick>
 8000fca:	1bc0      	subs	r0, r0, r7
 8000fcc:	4286      	cmp	r6, r0
 8000fce:	d8ee      	bhi.n	8000fae <HAL_SPI_Transmit+0x10a>
 8000fd0:	e7cf      	b.n	8000f72 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000fd2:	68a3      	ldr	r3, [r4, #8]
 8000fd4:	b933      	cbnz	r3, 8000fe4 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000fd6:	9303      	str	r3, [sp, #12]
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	9203      	str	r2, [sp, #12]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	9303      	str	r3, [sp, #12]
 8000fe2:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000fe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000fe6:	3000      	adds	r0, #0
 8000fe8:	bf18      	it	ne
 8000fea:	2001      	movne	r0, #1
 8000fec:	e7c2      	b.n	8000f74 <HAL_SPI_Transmit+0xd0>
 8000fee:	2002      	movs	r0, #2
 8000ff0:	e7c0      	b.n	8000f74 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	e7c4      	b.n	8000f80 <HAL_SPI_Transmit+0xdc>

08000ff6 <HAL_SPI_TransmitReceive>:
{
 8000ff6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ffa:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000ffc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001000:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001002:	2b01      	cmp	r3, #1
{
 8001004:	4604      	mov	r4, r0
 8001006:	460d      	mov	r5, r1
 8001008:	4616      	mov	r6, r2
 800100a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800100c:	f000 80ed 	beq.w	80011ea <HAL_SPI_TransmitReceive+0x1f4>
 8001010:	2301      	movs	r3, #1
 8001012:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001016:	f7ff fac3 	bl	80005a0 <HAL_GetTick>
  tmp  = hspi->State;
 800101a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 800101e:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001020:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001022:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001024:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001026:	d00a      	beq.n	800103e <HAL_SPI_TransmitReceive+0x48>
 8001028:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800102c:	f040 80db 	bne.w	80011e6 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001030:	68a2      	ldr	r2, [r4, #8]
 8001032:	2a00      	cmp	r2, #0
 8001034:	f040 80d7 	bne.w	80011e6 <HAL_SPI_TransmitReceive+0x1f0>
 8001038:	2b04      	cmp	r3, #4
 800103a:	f040 80d4 	bne.w	80011e6 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800103e:	2d00      	cmp	r5, #0
 8001040:	d04e      	beq.n	80010e0 <HAL_SPI_TransmitReceive+0xea>
 8001042:	2e00      	cmp	r6, #0
 8001044:	d04c      	beq.n	80010e0 <HAL_SPI_TransmitReceive+0xea>
 8001046:	f1b9 0f00 	cmp.w	r9, #0
 800104a:	d049      	beq.n	80010e0 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 800104c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001050:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001052:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001054:	bf04      	itt	eq
 8001056:	2305      	moveq	r3, #5
 8001058:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001060:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001062:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001064:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001066:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800106a:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800106e:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001070:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001074:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001076:	bf58      	it	pl
 8001078:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800107a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800107c:	bf58      	it	pl
 800107e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001082:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001086:	bf58      	it	pl
 8001088:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800108a:	68e2      	ldr	r2, [r4, #12]
 800108c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001090:	d15d      	bne.n	800114e <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001092:	b119      	cbz	r1, 800109c <HAL_SPI_TransmitReceive+0xa6>
 8001094:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001096:	b292      	uxth	r2, r2
 8001098:	2a01      	cmp	r2, #1
 800109a:	d106      	bne.n	80010aa <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800109c:	f835 2b02 	ldrh.w	r2, [r5], #2
 80010a0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80010a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80010aa:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b9bb      	cbnz	r3, 80010e4 <HAL_SPI_TransmitReceive+0xee>
 80010b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b9a3      	cbnz	r3, 80010e4 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80010ba:	f8cd 8000 	str.w	r8, [sp]
 80010be:	463b      	mov	r3, r7
 80010c0:	2201      	movs	r2, #1
 80010c2:	2102      	movs	r1, #2
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff fe59 	bl	8000d7c <SPI_WaitFlagStateUntilTimeout>
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d135      	bne.n	800113a <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80010ce:	4642      	mov	r2, r8
 80010d0:	4639      	mov	r1, r7
 80010d2:	4620      	mov	r0, r4
 80010d4:	f7ff fe99 	bl	8000e0a <SPI_CheckFlag_BSY>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d079      	beq.n	80011d0 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010dc:	2320      	movs	r3, #32
 80010de:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80010e0:	2001      	movs	r0, #1
 80010e2:	e02b      	b.n	800113c <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80010e4:	f1b9 0f00 	cmp.w	r9, #0
 80010e8:	d00f      	beq.n	800110a <HAL_SPI_TransmitReceive+0x114>
 80010ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b163      	cbz	r3, 800110a <HAL_SPI_TransmitReceive+0x114>
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	0791      	lsls	r1, r2, #30
 80010f6:	d508      	bpl.n	800110a <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80010f8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80010fc:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80010fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001100:	3b01      	subs	r3, #1
 8001102:	b29b      	uxth	r3, r3
 8001104:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001106:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800110a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800110c:	b29b      	uxth	r3, r3
 800110e:	b163      	cbz	r3, 800112a <HAL_SPI_TransmitReceive+0x134>
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	07d2      	lsls	r2, r2, #31
 8001116:	d508      	bpl.n	800112a <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800111e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001120:	3b01      	subs	r3, #1
 8001122:	b29b      	uxth	r3, r3
 8001124:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001126:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800112a:	1c78      	adds	r0, r7, #1
 800112c:	d0bf      	beq.n	80010ae <HAL_SPI_TransmitReceive+0xb8>
 800112e:	f7ff fa37 	bl	80005a0 <HAL_GetTick>
 8001132:	eba0 0008 	sub.w	r0, r0, r8
 8001136:	4287      	cmp	r7, r0
 8001138:	d8b9      	bhi.n	80010ae <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800113a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800113c:	2301      	movs	r3, #1
 800113e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001142:	2300      	movs	r3, #0
 8001144:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001148:	b005      	add	sp, #20
 800114a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800114e:	b119      	cbz	r1, 8001158 <HAL_SPI_TransmitReceive+0x162>
 8001150:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001152:	b292      	uxth	r2, r2
 8001154:	2a01      	cmp	r2, #1
 8001156:	d106      	bne.n	8001166 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001158:	f815 2b01 	ldrb.w	r2, [r5], #1
 800115c:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800115e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001160:	3b01      	subs	r3, #1
 8001162:	b29b      	uxth	r3, r3
 8001164:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001166:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800116a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800116c:	b29b      	uxth	r3, r3
 800116e:	b91b      	cbnz	r3, 8001178 <HAL_SPI_TransmitReceive+0x182>
 8001170:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001172:	b29b      	uxth	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0a0      	beq.n	80010ba <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001178:	f1b9 0f00 	cmp.w	r9, #0
 800117c:	d00f      	beq.n	800119e <HAL_SPI_TransmitReceive+0x1a8>
 800117e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001180:	b29b      	uxth	r3, r3
 8001182:	b163      	cbz	r3, 800119e <HAL_SPI_TransmitReceive+0x1a8>
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	0791      	lsls	r1, r2, #30
 800118a:	d508      	bpl.n	800119e <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800118c:	782a      	ldrb	r2, [r5, #0]
 800118e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001190:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001192:	3b01      	subs	r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001198:	3501      	adds	r5, #1
        txallowed = 0U;
 800119a:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800119e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b163      	cbz	r3, 80011be <HAL_SPI_TransmitReceive+0x1c8>
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	07d2      	lsls	r2, r2, #31
 80011aa:	d508      	bpl.n	80011be <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80011b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80011b8:	3601      	adds	r6, #1
        txallowed = 1U;
 80011ba:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80011be:	1c7b      	adds	r3, r7, #1
 80011c0:	d0d3      	beq.n	800116a <HAL_SPI_TransmitReceive+0x174>
 80011c2:	f7ff f9ed 	bl	80005a0 <HAL_GetTick>
 80011c6:	eba0 0008 	sub.w	r0, r0, r8
 80011ca:	4287      	cmp	r7, r0
 80011cc:	d8cd      	bhi.n	800116a <HAL_SPI_TransmitReceive+0x174>
 80011ce:	e7b4      	b.n	800113a <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011d0:	68a3      	ldr	r3, [r4, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1b2      	bne.n	800113c <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	9003      	str	r0, [sp, #12]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	9203      	str	r2, [sp, #12]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	9303      	str	r3, [sp, #12]
 80011e2:	9b03      	ldr	r3, [sp, #12]
 80011e4:	e7aa      	b.n	800113c <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80011e6:	2002      	movs	r0, #2
 80011e8:	e7a8      	b.n	800113c <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80011ea:	2002      	movs	r0, #2
 80011ec:	e7ac      	b.n	8001148 <HAL_SPI_TransmitReceive+0x152>

080011ee <HAL_SPI_GetState>:
  return hspi->State;
 80011ee:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80011f2:	4770      	bx	lr

080011f4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <disk_status+0x10>)
 80011f6:	181a      	adds	r2, r3, r0
 80011f8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80011fc:	7a10      	ldrb	r0, [r2, #8]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4718      	bx	r3
 8001204:	20000064 	.word	0x20000064

08001208 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <disk_initialize+0x1c>)
 800120a:	5c1a      	ldrb	r2, [r3, r0]
 800120c:	b942      	cbnz	r2, 8001220 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800120e:	2201      	movs	r2, #1
 8001210:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001212:	181a      	adds	r2, r3, r0
 8001214:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001218:	7a10      	ldrb	r0, [r2, #8]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4718      	bx	r3
  }
  return stat;
}
 8001220:	2000      	movs	r0, #0
 8001222:	4770      	bx	lr
 8001224:	20000064 	.word	0x20000064

08001228 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8001228:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800122a:	4c05      	ldr	r4, [pc, #20]	; (8001240 <disk_read+0x18>)
 800122c:	1825      	adds	r5, r4, r0
 800122e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8001232:	6860      	ldr	r0, [r4, #4]
 8001234:	6884      	ldr	r4, [r0, #8]
 8001236:	7a28      	ldrb	r0, [r5, #8]
 8001238:	46a4      	mov	ip, r4
  return res;
}
 800123a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800123c:	4760      	bx	ip
 800123e:	bf00      	nop
 8001240:	20000064 	.word	0x20000064

08001244 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8001244:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8001246:	4c05      	ldr	r4, [pc, #20]	; (800125c <disk_write+0x18>)
 8001248:	1825      	adds	r5, r4, r0
 800124a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800124e:	6860      	ldr	r0, [r4, #4]
 8001250:	68c4      	ldr	r4, [r0, #12]
 8001252:	7a28      	ldrb	r0, [r5, #8]
 8001254:	46a4      	mov	ip, r4
  return res;
}
 8001256:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8001258:	4760      	bx	ip
 800125a:	bf00      	nop
 800125c:	20000064 	.word	0x20000064

08001260 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <disk_ioctl+0x18>)
{
 8001262:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001264:	181c      	adds	r4, r3, r0
 8001266:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800126a:	7a20      	ldrb	r0, [r4, #8]
 800126c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800126e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	4718      	bx	r3
 8001276:	bf00      	nop
 8001278:	20000064 	.word	0x20000064

0800127c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 800127c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 800127e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8001280:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8001282:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8001286:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800128a:	4770      	bx	lr

0800128c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800128c:	0a0b      	lsrs	r3, r1, #8
 800128e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001290:	7043      	strb	r3, [r0, #1]
 8001292:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8001294:	0e09      	lsrs	r1, r1, #24
 8001296:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8001298:	70c1      	strb	r1, [r0, #3]
 800129a:	4770      	bx	lr

0800129c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800129c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800129e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80012a2:	4290      	cmp	r0, r2
 80012a4:	d1fb      	bne.n	800129e <mem_set+0x2>
}
 80012a6:	4770      	bx	lr

080012a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <chk_lock+0x58>)
 80012aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80012ac:	2500      	movs	r5, #0
 80012ae:	462a      	mov	r2, r5
 80012b0:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 80012b2:	681e      	ldr	r6, [r3, #0]
 80012b4:	b1a6      	cbz	r6, 80012e0 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80012b6:	6807      	ldr	r7, [r0, #0]
 80012b8:	42be      	cmp	r6, r7
 80012ba:	d112      	bne.n	80012e2 <chk_lock+0x3a>
 80012bc:	685f      	ldr	r7, [r3, #4]
 80012be:	6886      	ldr	r6, [r0, #8]
 80012c0:	42b7      	cmp	r7, r6
 80012c2:	d10e      	bne.n	80012e2 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80012c4:	689f      	ldr	r7, [r3, #8]
 80012c6:	6946      	ldr	r6, [r0, #20]
 80012c8:	42b7      	cmp	r7, r6
 80012ca:	d10a      	bne.n	80012e2 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80012cc:	b9b1      	cbnz	r1, 80012fc <chk_lock+0x54>
 80012ce:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80012d2:	8993      	ldrh	r3, [r2, #12]
 80012d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d8:	bf14      	ite	ne
 80012da:	2000      	movne	r0, #0
 80012dc:	2010      	moveq	r0, #16
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 80012e0:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80012e2:	3201      	adds	r2, #1
 80012e4:	2a02      	cmp	r2, #2
 80012e6:	f103 0310 	add.w	r3, r3, #16
 80012ea:	d1e2      	bne.n	80012b2 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80012ec:	b10d      	cbz	r5, 80012f2 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80012ee:	2000      	movs	r0, #0
 80012f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80012f2:	2902      	cmp	r1, #2
 80012f4:	bf0c      	ite	eq
 80012f6:	2000      	moveq	r0, #0
 80012f8:	2012      	movne	r0, #18
 80012fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80012fc:	2010      	movs	r0, #16
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	20000040 	.word	0x20000040

08001304 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001304:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <inc_lock+0x74>)
 8001306:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8001308:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800130a:	2300      	movs	r3, #0
 800130c:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 800130e:	6814      	ldr	r4, [r2, #0]
 8001310:	42ac      	cmp	r4, r5
 8001312:	d107      	bne.n	8001324 <inc_lock+0x20>
 8001314:	6857      	ldr	r7, [r2, #4]
 8001316:	6884      	ldr	r4, [r0, #8]
 8001318:	42a7      	cmp	r7, r4
 800131a:	d103      	bne.n	8001324 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 800131c:	6897      	ldr	r7, [r2, #8]
 800131e:	6944      	ldr	r4, [r0, #20]
 8001320:	42a7      	cmp	r7, r4
 8001322:	d01d      	beq.n	8001360 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001324:	3301      	adds	r3, #1
 8001326:	2b02      	cmp	r3, #2
 8001328:	f102 0210 	add.w	r2, r2, #16
 800132c:	d1ef      	bne.n	800130e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800132e:	6833      	ldr	r3, [r6, #0]
 8001330:	b113      	cbz	r3, 8001338 <inc_lock+0x34>
 8001332:	6933      	ldr	r3, [r6, #16]
 8001334:	b9eb      	cbnz	r3, 8001372 <inc_lock+0x6e>
 8001336:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8001338:	011c      	lsls	r4, r3, #4
 800133a:	1932      	adds	r2, r6, r4
 800133c:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 800133e:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8001340:	6940      	ldr	r0, [r0, #20]
 8001342:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8001344:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8001346:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8001348:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800134a:	b979      	cbnz	r1, 800136c <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800134c:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8001350:	8992      	ldrh	r2, [r2, #12]
 8001352:	3201      	adds	r2, #1
 8001354:	b292      	uxth	r2, r2
 8001356:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 800135a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800135c:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001360:	2900      	cmp	r1, #0
 8001362:	d0f3      	beq.n	800134c <inc_lock+0x48>
 8001364:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8001368:	8992      	ldrh	r2, [r2, #12]
 800136a:	b912      	cbnz	r2, 8001372 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800136c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001370:	e7f1      	b.n	8001356 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8001372:	2000      	movs	r0, #0
 8001374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001376:	bf00      	nop
 8001378:	20000040 	.word	0x20000040

0800137c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800137c:	3801      	subs	r0, #1
 800137e:	2801      	cmp	r0, #1
 8001380:	d80e      	bhi.n	80013a0 <dec_lock+0x24>
		n = Files[i].ctr;
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <dec_lock+0x2c>)
 8001384:	0103      	lsls	r3, r0, #4
 8001386:	18d1      	adds	r1, r2, r3
 8001388:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 800138a:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800138e:	b280      	uxth	r0, r0
 8001390:	b108      	cbz	r0, 8001396 <dec_lock+0x1a>
 8001392:	1e48      	subs	r0, r1, #1
 8001394:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8001396:	18d1      	adds	r1, r2, r3
 8001398:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800139a:	b918      	cbnz	r0, 80013a4 <dec_lock+0x28>
 800139c:	50d0      	str	r0, [r2, r3]
 800139e:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80013a0:	2002      	movs	r0, #2
 80013a2:	4770      	bx	lr
		res = FR_OK;
 80013a4:	2000      	movs	r0, #0
	}
	return res;
}
 80013a6:	4770      	bx	lr
 80013a8:	20000040 	.word	0x20000040

080013ac <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80013ac:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 80013ae:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80013b0:	3b02      	subs	r3, #2
 80013b2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80013b4:	bf3d      	ittte	cc
 80013b6:	8943      	ldrhcc	r3, [r0, #10]
 80013b8:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 80013ba:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80013be:	2000      	movcs	r0, #0
}
 80013c0:	4770      	bx	lr

080013c2 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80013c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80013c4:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80013c6:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80013c8:	0a49      	lsrs	r1, r1, #9
 80013ca:	8952      	ldrh	r2, [r2, #10]
 80013cc:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80013d0:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80013d2:	b130      	cbz	r0, 80013e2 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80013d4:	4281      	cmp	r1, r0
 80013d6:	d302      	bcc.n	80013de <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 80013d8:	1a09      	subs	r1, r1, r0
 80013da:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80013dc:	e7f8      	b.n	80013d0 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 80013de:	6858      	ldr	r0, [r3, #4]
 80013e0:	4408      	add	r0, r1
}
 80013e2:	4770      	bx	lr

080013e4 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80013e4:	6802      	ldr	r2, [r0, #0]
{
 80013e6:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80013e8:	b152      	cbz	r2, 8001400 <get_ldnumber+0x1c>
 80013ea:	4611      	mov	r1, r2
 80013ec:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80013ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80013f2:	2c20      	cmp	r4, #32
 80013f4:	d90c      	bls.n	8001410 <get_ldnumber+0x2c>
 80013f6:	2c3a      	cmp	r4, #58	; 0x3a
 80013f8:	d1f8      	bne.n	80013ec <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80013fa:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80013fc:	428b      	cmp	r3, r1
 80013fe:	d002      	beq.n	8001406 <get_ldnumber+0x22>
	int vol = -1;
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8001404:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8001406:	7812      	ldrb	r2, [r2, #0]
 8001408:	2a30      	cmp	r2, #48	; 0x30
 800140a:	d1f9      	bne.n	8001400 <get_ldnumber+0x1c>
					*path = ++tt;
 800140c:	3301      	adds	r3, #1
 800140e:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8001410:	2000      	movs	r0, #0
 8001412:	bd10      	pop	{r4, pc}

08001414 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8001418:	4604      	mov	r4, r0
 800141a:	b918      	cbnz	r0, 8001424 <validate+0x10>
		*fs = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8001420:	2009      	movs	r0, #9
 8001422:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8001424:	6803      	ldr	r3, [r0, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f8      	beq.n	800141c <validate+0x8>
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	2a00      	cmp	r2, #0
 800142e:	d0f5      	beq.n	800141c <validate+0x8>
 8001430:	88d9      	ldrh	r1, [r3, #6]
 8001432:	8882      	ldrh	r2, [r0, #4]
 8001434:	4291      	cmp	r1, r2
 8001436:	d1f1      	bne.n	800141c <validate+0x8>
 8001438:	7858      	ldrb	r0, [r3, #1]
 800143a:	f7ff fedb 	bl	80011f4 <disk_status>
 800143e:	f010 0001 	ands.w	r0, r0, #1
 8001442:	d1eb      	bne.n	800141c <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8001448:	bd38      	pop	{r3, r4, r5, pc}

0800144a <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800144a:	3801      	subs	r0, #1
 800144c:	440a      	add	r2, r1
			*d++ = *s++;
 800144e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001452:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8001456:	4291      	cmp	r1, r2
 8001458:	d1f9      	bne.n	800144e <mem_cpy.part.0+0x4>
}
 800145a:	4770      	bx	lr

0800145c <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 800145c:	7eca      	ldrb	r2, [r1, #27]
 800145e:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8001460:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8001462:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8001466:	bf01      	itttt	eq
 8001468:	7d48      	ldrbeq	r0, [r1, #21]
 800146a:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800146c:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8001470:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8001474:	4618      	mov	r0, r3
 8001476:	4770      	bx	lr

08001478 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8001478:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800147c:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800147e:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8001480:	7803      	ldrb	r3, [r0, #0]
 8001482:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8001484:	bf01      	itttt	eq
 8001486:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8001488:	750a      	strbeq	r2, [r1, #20]
 800148a:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800148c:	754a      	strbeq	r2, [r1, #21]
 800148e:	4770      	bx	lr

08001490 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8001492:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8001494:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8001498:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800149a:	2301      	movs	r3, #1
 800149c:	462a      	mov	r2, r5
 800149e:	4639      	mov	r1, r7
 80014a0:	7840      	ldrb	r0, [r0, #1]
 80014a2:	f7ff fecf 	bl	8001244 <disk_write>
 80014a6:	b9a0      	cbnz	r0, 80014d2 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80014a8:	6a23      	ldr	r3, [r4, #32]
 80014aa:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 80014ac:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80014ae:	1aeb      	subs	r3, r5, r3
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d301      	bcc.n	80014b8 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 80014b4:	2000      	movs	r0, #0
 80014b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80014b8:	78a6      	ldrb	r6, [r4, #2]
 80014ba:	2e01      	cmp	r6, #1
 80014bc:	d9fa      	bls.n	80014b4 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 80014be:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80014c0:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80014c2:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80014c4:	462a      	mov	r2, r5
 80014c6:	2301      	movs	r3, #1
 80014c8:	4639      	mov	r1, r7
 80014ca:	f7ff febb 	bl	8001244 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80014ce:	3e01      	subs	r6, #1
 80014d0:	e7f3      	b.n	80014ba <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 80014d2:	2001      	movs	r0, #1
}
 80014d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014d6 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80014d6:	78c3      	ldrb	r3, [r0, #3]
 80014d8:	b10b      	cbz	r3, 80014de <sync_window+0x8>
 80014da:	f7ff bfd9 	b.w	8001490 <sync_window.part.4>
}
 80014de:	4618      	mov	r0, r3
 80014e0:	4770      	bx	lr

080014e2 <sync_fs>:
{
 80014e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e4:	4604      	mov	r4, r0
	res = sync_window(fs);
 80014e6:	f7ff fff6 	bl	80014d6 <sync_window>
 80014ea:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d142      	bne.n	8001576 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80014f0:	7823      	ldrb	r3, [r4, #0]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d137      	bne.n	8001566 <sync_fs+0x84>
 80014f6:	7927      	ldrb	r7, [r4, #4]
 80014f8:	2f01      	cmp	r7, #1
 80014fa:	d134      	bne.n	8001566 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 80014fc:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8001500:	4601      	mov	r1, r0
 8001502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001506:	4630      	mov	r0, r6
 8001508:	f7ff fec8 	bl	800129c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800150c:	2355      	movs	r3, #85	; 0x55
 800150e:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8001512:	23aa      	movs	r3, #170	; 0xaa
 8001514:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8001518:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 800151a:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800151c:	2172      	movs	r1, #114	; 0x72
 800151e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8001522:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8001526:	2361      	movs	r3, #97	; 0x61
 8001528:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 800152c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8001530:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 8001534:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 8001538:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 800153c:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001540:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8001544:	6921      	ldr	r1, [r4, #16]
 8001546:	f7ff fea1 	bl	800128c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800154a:	68e1      	ldr	r1, [r4, #12]
 800154c:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8001550:	f7ff fe9c 	bl	800128c <st_dword>
			fs->winsect = fs->volbase + 1;
 8001554:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8001556:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8001558:	3201      	adds	r2, #1
 800155a:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800155c:	463b      	mov	r3, r7
 800155e:	4631      	mov	r1, r6
 8001560:	f7ff fe70 	bl	8001244 <disk_write>
			fs->fsi_flag = 0;
 8001564:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001566:	2200      	movs	r2, #0
 8001568:	4611      	mov	r1, r2
 800156a:	7860      	ldrb	r0, [r4, #1]
 800156c:	f7ff fe78 	bl	8001260 <disk_ioctl>
 8001570:	3000      	adds	r0, #0
 8001572:	bf18      	it	ne
 8001574:	2001      	movne	r0, #1
}
 8001576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001578 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8001578:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800157a:	428b      	cmp	r3, r1
{
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	4606      	mov	r6, r0
 8001580:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8001582:	d012      	beq.n	80015aa <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8001584:	f7ff ffa7 	bl	80014d6 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001588:	4604      	mov	r4, r0
 800158a:	b960      	cbnz	r0, 80015a6 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800158c:	462a      	mov	r2, r5
 800158e:	2301      	movs	r3, #1
 8001590:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8001594:	7870      	ldrb	r0, [r6, #1]
 8001596:	f7ff fe47 	bl	8001228 <disk_read>
 800159a:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800159c:	bf1c      	itt	ne
 800159e:	f04f 35ff 	movne.w	r5, #4294967295
 80015a2:	2401      	movne	r4, #1
			fs->winsect = sector;
 80015a4:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 80015a6:	4620      	mov	r0, r4
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80015aa:	2400      	movs	r4, #0
 80015ac:	e7fb      	b.n	80015a6 <move_window+0x2e>
	...

080015b0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80015b0:	2300      	movs	r3, #0
{
 80015b2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80015b4:	70c3      	strb	r3, [r0, #3]
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 80015bc:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80015be:	f7ff ffdb 	bl	8001578 <move_window>
 80015c2:	bb30      	cbnz	r0, 8001612 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 80015c4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80015c8:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80015cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80015d0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d11e      	bne.n	8001616 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80015d8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80015dc:	2be9      	cmp	r3, #233	; 0xe9
 80015de:	d005      	beq.n	80015ec <check_fs+0x3c>
 80015e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <check_fs+0x74>)
 80015e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d116      	bne.n	800161a <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80015ec:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80015f0:	f7ff fe44 	bl	800127c <ld_dword>
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <check_fs+0x78>)
 80015f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80015fa:	4298      	cmp	r0, r3
 80015fc:	d00f      	beq.n	800161e <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80015fe:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8001602:	f7ff fe3b 	bl	800127c <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <check_fs+0x7c>)
 8001608:	4298      	cmp	r0, r3
 800160a:	bf14      	ite	ne
 800160c:	2002      	movne	r0, #2
 800160e:	2000      	moveq	r0, #0
 8001610:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8001612:	2004      	movs	r0, #4
 8001614:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8001616:	2003      	movs	r0, #3
 8001618:	bd10      	pop	{r4, pc}
	return 2;
 800161a:	2002      	movs	r0, #2
 800161c:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800161e:	2000      	movs	r0, #0
}
 8001620:	bd10      	pop	{r4, pc}
 8001622:	bf00      	nop
 8001624:	009000eb 	.word	0x009000eb
 8001628:	00544146 	.word	0x00544146
 800162c:	33544146 	.word	0x33544146

08001630 <find_volume>:
{
 8001630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 8001634:	2300      	movs	r3, #0
{
 8001636:	b085      	sub	sp, #20
	*rfs = 0;
 8001638:	600b      	str	r3, [r1, #0]
{
 800163a:	460f      	mov	r7, r1
 800163c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800163e:	f7ff fed1 	bl	80013e4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001642:	1e06      	subs	r6, r0, #0
 8001644:	f2c0 8140 	blt.w	80018c8 <find_volume+0x298>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8001648:	4ba3      	ldr	r3, [pc, #652]	; (80018d8 <find_volume+0x2a8>)
 800164a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800164e:	2c00      	cmp	r4, #0
 8001650:	f000 813c 	beq.w	80018cc <find_volume+0x29c>
	*rfs = fs;							/* Return pointer to the file system object */
 8001654:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8001656:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8001658:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800165c:	b173      	cbz	r3, 800167c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800165e:	7860      	ldrb	r0, [r4, #1]
 8001660:	f7ff fdc8 	bl	80011f4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8001664:	07c1      	lsls	r1, r0, #31
 8001666:	d409      	bmi.n	800167c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8001668:	2d00      	cmp	r5, #0
 800166a:	f000 8131 	beq.w	80018d0 <find_volume+0x2a0>
 800166e:	f010 0004 	ands.w	r0, r0, #4
 8001672:	d000      	beq.n	8001676 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8001674:	200a      	movs	r0, #10
}
 8001676:	b005      	add	sp, #20
 8001678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800167c:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800167e:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8001680:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8001682:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8001684:	f7ff fdc0 	bl	8001208 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8001688:	07c2      	lsls	r2, r0, #31
 800168a:	f100 8123 	bmi.w	80018d4 <find_volume+0x2a4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800168e:	b10d      	cbz	r5, 8001694 <find_volume+0x64>
 8001690:	0743      	lsls	r3, r0, #29
 8001692:	d4ef      	bmi.n	8001674 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8001694:	2100      	movs	r1, #0
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff ff8a 	bl	80015b0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800169c:	2802      	cmp	r0, #2
 800169e:	f040 80f7 	bne.w	8001890 <find_volume+0x260>
 80016a2:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 80016a6:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80016a8:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80016ac:	b110      	cbz	r0, 80016b4 <find_volume+0x84>
 80016ae:	4628      	mov	r0, r5
 80016b0:	f7ff fde4 	bl	800127c <ld_dword>
 80016b4:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80016b8:	3101      	adds	r1, #1
 80016ba:	2904      	cmp	r1, #4
 80016bc:	f105 0510 	add.w	r5, r5, #16
 80016c0:	d1f2      	bne.n	80016a8 <find_volume+0x78>
 80016c2:	2500      	movs	r5, #0
			bsect = br[i];
 80016c4:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80016c8:	2e00      	cmp	r6, #0
 80016ca:	f000 80d8 	beq.w	800187e <find_volume+0x24e>
 80016ce:	4631      	mov	r1, r6
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7ff ff6d 	bl	80015b0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80016d6:	2801      	cmp	r0, #1
 80016d8:	f200 80d2 	bhi.w	8001880 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 80016dc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80016e0:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80016e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80016e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ec:	f040 80d4 	bne.w	8001898 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 80016f0:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80016f4:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80016f8:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 80016fc:	d104      	bne.n	8001708 <find_volume+0xd8>
 80016fe:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8001702:	f7ff fdbb 	bl	800127c <ld_dword>
 8001706:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8001708:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 800170c:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800170e:	f109 33ff 	add.w	r3, r9, #4294967295
 8001712:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8001714:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8001718:	f200 80be 	bhi.w	8001898 <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800171c:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 8001720:	b2bb      	uxth	r3, r7
 8001722:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80b7 	beq.w	8001898 <find_volume+0x268>
 800172a:	1e7b      	subs	r3, r7, #1
 800172c:	423b      	tst	r3, r7
 800172e:	f040 80b3 	bne.w	8001898 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8001732:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001736:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 800173a:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800173e:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8001742:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8001746:	f040 80a7 	bne.w	8001898 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 800174a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 800174e:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8001752:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8001756:	d103      	bne.n	8001760 <find_volume+0x130>
 8001758:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800175c:	f7ff fd8e 	bl	800127c <ld_dword>
	rv = rv << 8 | ptr[0];
 8001760:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8001764:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8001768:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 800176c:	f000 8094 	beq.w	8001898 <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8001770:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8001774:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 8001778:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800177a:	4570      	cmp	r0, lr
 800177c:	f0c0 808c 	bcc.w	8001898 <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8001780:	eba0 010e 	sub.w	r1, r0, lr
 8001784:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001788:	2900      	cmp	r1, #0
 800178a:	f000 8085 	beq.w	8001898 <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800178e:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8001792:	4281      	cmp	r1, r0
 8001794:	f200 8084 	bhi.w	80018a0 <find_volume+0x270>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8001798:	f640 77f5 	movw	r7, #4085	; 0xff5
 800179c:	42b9      	cmp	r1, r7
 800179e:	bf8c      	ite	hi
 80017a0:	2702      	movhi	r7, #2
 80017a2:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80017a4:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80017a6:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 80017a8:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 80017ac:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80017ae:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80017b0:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80017b2:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80017b4:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80017b6:	d175      	bne.n	80018a4 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 80017b8:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 80017bc:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80017c0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80017c4:	d168      	bne.n	8001898 <find_volume+0x268>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80017c6:	f1b8 0f00 	cmp.w	r8, #0
 80017ca:	d165      	bne.n	8001898 <find_volume+0x268>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80017cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80017d0:	f7ff fd54 	bl	800127c <ld_dword>
 80017d4:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80017d6:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80017d8:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 80017dc:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 80017e0:	d35a      	bcc.n	8001898 <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	6123      	str	r3, [r4, #16]
 80017e8:	60e3      	str	r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80017ea:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 80017ec:	f04f 0380 	mov.w	r3, #128	; 0x80
 80017f0:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80017f2:	d12f      	bne.n	8001854 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 80017f4:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80017f8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80017fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d127      	bne.n	8001854 <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 8001804:	1c71      	adds	r1, r6, #1
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff feb6 	bl	8001578 <move_window>
 800180c:	bb10      	cbnz	r0, 8001854 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 800180e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8001812:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 8001816:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8001818:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800181c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8001820:	4293      	cmp	r3, r2
 8001822:	d117      	bne.n	8001854 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8001824:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001828:	f7ff fd28 	bl	800127c <ld_dword>
 800182c:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <find_volume+0x2ac>)
 800182e:	4298      	cmp	r0, r3
 8001830:	d110      	bne.n	8001854 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8001832:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8001836:	f7ff fd21 	bl	800127c <ld_dword>
 800183a:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <find_volume+0x2b0>)
 800183c:	4298      	cmp	r0, r3
 800183e:	d109      	bne.n	8001854 <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8001840:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8001844:	f7ff fd1a 	bl	800127c <ld_dword>
 8001848:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800184a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800184e:	f7ff fd15 	bl	800127c <ld_dword>
 8001852:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8001854:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <find_volume+0x2b4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8001856:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8001858:	8813      	ldrh	r3, [r2, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	b29b      	uxth	r3, r3
 800185e:	8013      	strh	r3, [r2, #0]
 8001860:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <find_volume+0x2b8>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4294      	cmp	r4, r2
 8001868:	bf04      	itt	eq
 800186a:	2200      	moveq	r2, #0
 800186c:	601a      	streq	r2, [r3, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	4294      	cmp	r4, r2
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f47f aefe 	bne.w	8001676 <find_volume+0x46>
 800187a:	6118      	str	r0, [r3, #16]
 800187c:	e6fb      	b.n	8001676 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800187e:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8001880:	3501      	adds	r5, #1
 8001882:	2d04      	cmp	r5, #4
 8001884:	f47f af1e 	bne.w	80016c4 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001888:	2804      	cmp	r0, #4
 800188a:	d105      	bne.n	8001898 <find_volume+0x268>
 800188c:	2001      	movs	r0, #1
 800188e:	e6f2      	b.n	8001676 <find_volume+0x46>
 8001890:	2804      	cmp	r0, #4
 8001892:	d0fb      	beq.n	800188c <find_volume+0x25c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8001894:	2801      	cmp	r0, #1
 8001896:	d901      	bls.n	800189c <find_volume+0x26c>
 8001898:	200d      	movs	r0, #13
 800189a:	e6ec      	b.n	8001676 <find_volume+0x46>
	bsect = 0;
 800189c:	2600      	movs	r6, #0
 800189e:	e71d      	b.n	80016dc <find_volume+0xac>
		fmt = FS_FAT32;
 80018a0:	2703      	movs	r7, #3
 80018a2:	e77f      	b.n	80017a4 <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80018a4:	f1b8 0f00 	cmp.w	r8, #0
 80018a8:	d0f6      	beq.n	8001898 <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80018aa:	2f02      	cmp	r7, #2
 80018ac:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80018b0:	bf18      	it	ne
 80018b2:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80018b4:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80018b6:	bf18      	it	ne
 80018b8:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80018bc:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80018be:	bf0c      	ite	eq
 80018c0:	4601      	moveq	r1, r0
 80018c2:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 80018c6:	e787      	b.n	80017d8 <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 80018c8:	200b      	movs	r0, #11
 80018ca:	e6d4      	b.n	8001676 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80018cc:	200c      	movs	r0, #12
 80018ce:	e6d2      	b.n	8001676 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 80018d0:	4628      	mov	r0, r5
 80018d2:	e6d0      	b.n	8001676 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80018d4:	2003      	movs	r0, #3
 80018d6:	e6ce      	b.n	8001676 <find_volume+0x46>
 80018d8:	2000003c 	.word	0x2000003c
 80018dc:	41615252 	.word	0x41615252
 80018e0:	61417272 	.word	0x61417272
 80018e4:	20000060 	.word	0x20000060
 80018e8:	20000040 	.word	0x20000040

080018ec <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80018ec:	2901      	cmp	r1, #1
{
 80018ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018f2:	4605      	mov	r5, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80018f8:	d972      	bls.n	80019e0 <put_fat+0xf4>
 80018fa:	6943      	ldr	r3, [r0, #20]
 80018fc:	4299      	cmp	r1, r3
 80018fe:	d26f      	bcs.n	80019e0 <put_fat+0xf4>
		switch (fs->fs_type) {
 8001900:	7803      	ldrb	r3, [r0, #0]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d03f      	beq.n	8001986 <put_fat+0x9a>
 8001906:	2b03      	cmp	r3, #3
 8001908:	d050      	beq.n	80019ac <put_fat+0xc0>
 800190a:	2b01      	cmp	r3, #1
 800190c:	d168      	bne.n	80019e0 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 800190e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001912:	6a01      	ldr	r1, [r0, #32]
 8001914:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8001918:	f7ff fe2e 	bl	8001578 <move_window>
 800191c:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 800191e:	bb38      	cbnz	r0, 8001970 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8001920:	f105 0930 	add.w	r9, r5, #48	; 0x30
 8001924:	f108 0a01 	add.w	sl, r8, #1
 8001928:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800192c:	f014 0401 	ands.w	r4, r4, #1
 8001930:	bf1f      	itttt	ne
 8001932:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8001936:	f003 020f 	andne.w	r2, r3, #15
 800193a:	013b      	lslne	r3, r7, #4
 800193c:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8001940:	bf14      	ite	ne
 8001942:	4313      	orrne	r3, r2
 8001944:	b2fb      	uxtbeq	r3, r7
 8001946:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800194a:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001950:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8001954:	4628      	mov	r0, r5
 8001956:	f7ff fe0f 	bl	8001578 <move_window>
			if (res != FR_OK) break;
 800195a:	4606      	mov	r6, r0
 800195c:	b940      	cbnz	r0, 8001970 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 800195e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8001962:	b144      	cbz	r4, 8001976 <put_fat+0x8a>
 8001964:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8001968:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	70eb      	strb	r3, [r5, #3]
}
 8001970:	4630      	mov	r0, r6
 8001972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8001976:	f819 300a 	ldrb.w	r3, [r9, sl]
 800197a:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800197e:	f023 030f 	bic.w	r3, r3, #15
 8001982:	431f      	orrs	r7, r3
 8001984:	e7f0      	b.n	8001968 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8001986:	6a01      	ldr	r1, [r0, #32]
 8001988:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800198c:	f7ff fdf4 	bl	8001578 <move_window>
			if (res != FR_OK) break;
 8001990:	4606      	mov	r6, r0
 8001992:	2800      	cmp	r0, #0
 8001994:	d1ec      	bne.n	8001970 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8001996:	0064      	lsls	r4, r4, #1
 8001998:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800199c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80019a0:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80019a2:	551f      	strb	r7, [r3, r4]
 80019a4:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80019a8:	7057      	strb	r7, [r2, #1]
 80019aa:	e7df      	b.n	800196c <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80019ac:	6a01      	ldr	r1, [r0, #32]
 80019ae:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80019b2:	f7ff fde1 	bl	8001578 <move_window>
			if (res != FR_OK) break;
 80019b6:	4606      	mov	r6, r0
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d1d9      	bne.n	8001970 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80019bc:	00a4      	lsls	r4, r4, #2
 80019be:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80019c2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80019c6:	441c      	add	r4, r3
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff fc57 	bl	800127c <ld_dword>
 80019ce:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80019d2:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80019d6:	4339      	orrs	r1, r7
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff fc57 	bl	800128c <st_dword>
 80019de:	e7c5      	b.n	800196c <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 80019e0:	2602      	movs	r6, #2
 80019e2:	e7c5      	b.n	8001970 <put_fat+0x84>

080019e4 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80019e4:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80019e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e8:	4605      	mov	r5, r0
 80019ea:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80019ec:	d952      	bls.n	8001a94 <get_fat.isra.8+0xb0>
 80019ee:	6943      	ldr	r3, [r0, #20]
 80019f0:	4299      	cmp	r1, r3
 80019f2:	d24f      	bcs.n	8001a94 <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 80019f4:	7803      	ldrb	r3, [r0, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d029      	beq.n	8001a4e <get_fat.isra.8+0x6a>
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d038      	beq.n	8001a70 <get_fat.isra.8+0x8c>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d148      	bne.n	8001a94 <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8001a02:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001a06:	6a01      	ldr	r1, [r0, #32]
 8001a08:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8001a0c:	f7ff fdb4 	bl	8001578 <move_window>
 8001a10:	b110      	cbz	r0, 8001a18 <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001a12:	f04f 30ff 	mov.w	r0, #4294967295
 8001a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8001a18:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001a1a:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 8001a1c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8001a20:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001a22:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8001a26:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8001a28:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001a2c:	f7ff fda4 	bl	8001578 <move_window>
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d1ee      	bne.n	8001a12 <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8001a34:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8001a38:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8001a3a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8001a3c:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8001a40:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8001a44:	bf4c      	ite	mi
 8001a46:	0900      	lsrmi	r0, r0, #4
 8001a48:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8001a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001a4e:	6a01      	ldr	r1, [r0, #32]
 8001a50:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8001a54:	f7ff fd90 	bl	8001578 <move_window>
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d1da      	bne.n	8001a12 <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8001a5c:	0064      	lsls	r4, r4, #1
 8001a5e:	3530      	adds	r5, #48	; 0x30
 8001a60:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8001a64:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8001a66:	5d28      	ldrb	r0, [r5, r4]
 8001a68:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8001a6a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001a70:	6a01      	ldr	r1, [r0, #32]
 8001a72:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8001a76:	f7ff fd7f 	bl	8001578 <move_window>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1c9      	bne.n	8001a12 <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8001a7e:	00a4      	lsls	r4, r4, #2
 8001a80:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001a84:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8001a88:	4420      	add	r0, r4
 8001a8a:	f7ff fbf7 	bl	800127c <ld_dword>
 8001a8e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8001a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8001a94:	2001      	movs	r0, #1
}
 8001a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a98 <create_chain>:
{
 8001a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9c:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8001a9e:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8001aa0:	460f      	mov	r7, r1
 8001aa2:	b971      	cbnz	r1, 8001ac2 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8001aa4:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8001aa6:	b1f6      	cbz	r6, 8001ae6 <create_chain+0x4e>
 8001aa8:	696b      	ldr	r3, [r5, #20]
 8001aaa:	429e      	cmp	r6, r3
 8001aac:	bf28      	it	cs
 8001aae:	2601      	movcs	r6, #1
 8001ab0:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8001ab2:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 8001ab4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8001ab6:	429c      	cmp	r4, r3
 8001ab8:	d318      	bcc.n	8001aec <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8001aba:	2e01      	cmp	r6, #1
 8001abc:	d815      	bhi.n	8001aea <create_chain+0x52>
 8001abe:	2400      	movs	r4, #0
 8001ac0:	e009      	b.n	8001ad6 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8001ac2:	4628      	mov	r0, r5
 8001ac4:	f7ff ff8e 	bl	80019e4 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8001ac8:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8001aca:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8001acc:	d937      	bls.n	8001b3e <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8001ace:	1c43      	adds	r3, r0, #1
 8001ad0:	d104      	bne.n	8001adc <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8001ad2:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001adc:	696b      	ldr	r3, [r5, #20]
 8001ade:	4298      	cmp	r0, r3
 8001ae0:	d3f9      	bcc.n	8001ad6 <create_chain+0x3e>
 8001ae2:	463e      	mov	r6, r7
 8001ae4:	e7e4      	b.n	8001ab0 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8001ae6:	2601      	movs	r6, #1
 8001ae8:	e7e2      	b.n	8001ab0 <create_chain+0x18>
				ncl = 2;
 8001aea:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8001aec:	4621      	mov	r1, r4
 8001aee:	f8d8 0000 	ldr.w	r0, [r8]
 8001af2:	f7ff ff77 	bl	80019e4 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8001af6:	b130      	cbz	r0, 8001b06 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8001af8:	2801      	cmp	r0, #1
 8001afa:	d020      	beq.n	8001b3e <create_chain+0xa6>
 8001afc:	3001      	adds	r0, #1
 8001afe:	d0e8      	beq.n	8001ad2 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8001b00:	42b4      	cmp	r4, r6
 8001b02:	d1d6      	bne.n	8001ab2 <create_chain+0x1a>
 8001b04:	e7db      	b.n	8001abe <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8001b06:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f7ff feed 	bl	80018ec <put_fat>
		if (res == FR_OK && clst != 0) {
 8001b12:	b990      	cbnz	r0, 8001b3a <create_chain+0xa2>
 8001b14:	b957      	cbnz	r7, 8001b2c <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001b16:	696a      	ldr	r2, [r5, #20]
 8001b18:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 8001b1a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001b1c:	3a02      	subs	r2, #2
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d90f      	bls.n	8001b42 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8001b22:	792b      	ldrb	r3, [r5, #4]
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	712b      	strb	r3, [r5, #4]
 8001b2a:	e7d4      	b.n	8001ad6 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	4639      	mov	r1, r7
 8001b30:	4628      	mov	r0, r5
 8001b32:	f7ff fedb 	bl	80018ec <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d0ed      	beq.n	8001b16 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8001b3a:	2801      	cmp	r0, #1
 8001b3c:	d0c9      	beq.n	8001ad2 <create_chain+0x3a>
 8001b3e:	2401      	movs	r4, #1
 8001b40:	e7c9      	b.n	8001ad6 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001b42:	3b01      	subs	r3, #1
 8001b44:	612b      	str	r3, [r5, #16]
 8001b46:	e7ec      	b.n	8001b22 <create_chain+0x8a>

08001b48 <remove_chain>:
{
 8001b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4a:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001b4c:	2d01      	cmp	r5, #1
{
 8001b4e:	4607      	mov	r7, r0
 8001b50:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001b52:	d801      	bhi.n	8001b58 <remove_chain+0x10>
 8001b54:	2002      	movs	r0, #2
 8001b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8001b58:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001b5a:	6963      	ldr	r3, [r4, #20]
 8001b5c:	429d      	cmp	r5, r3
 8001b5e:	d2f9      	bcs.n	8001b54 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001b60:	b12a      	cbz	r2, 8001b6e <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001b62:	f04f 32ff 	mov.w	r2, #4294967295
 8001b66:	4620      	mov	r0, r4
 8001b68:	f7ff fec0 	bl	80018ec <put_fat>
		if (res != FR_OK) return res;
 8001b6c:	bb08      	cbnz	r0, 8001bb2 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001b6e:	4629      	mov	r1, r5
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f7ff ff37 	bl	80019e4 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8001b76:	4606      	mov	r6, r0
 8001b78:	b908      	cbnz	r0, 8001b7e <remove_chain+0x36>
	return FR_OK;
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001b7e:	2801      	cmp	r0, #1
 8001b80:	d0e8      	beq.n	8001b54 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001b82:	1c43      	adds	r3, r0, #1
 8001b84:	d014      	beq.n	8001bb0 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001b86:	2200      	movs	r2, #0
 8001b88:	4629      	mov	r1, r5
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff feae 	bl	80018ec <put_fat>
			if (res != FR_OK) return res;
 8001b90:	b978      	cbnz	r0, 8001bb2 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001b92:	6962      	ldr	r2, [r4, #20]
 8001b94:	6923      	ldr	r3, [r4, #16]
 8001b96:	1e91      	subs	r1, r2, #2
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d205      	bcs.n	8001ba8 <remove_chain+0x60>
			fs->free_clst++;
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8001ba0:	7923      	ldrb	r3, [r4, #4]
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8001ba8:	4296      	cmp	r6, r2
 8001baa:	4635      	mov	r5, r6
 8001bac:	d3df      	bcc.n	8001b6e <remove_chain+0x26>
 8001bae:	e7e4      	b.n	8001b7a <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001bb0:	2001      	movs	r0, #1
}
 8001bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bb4 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8001bb4:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8001bb6:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8001bb8:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8001bba:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8001bbc:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8001bbe:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8001bc0:	b992      	cbnz	r2, 8001be8 <dir_sdi.constprop.11+0x34>
 8001bc2:	7823      	ldrb	r3, [r4, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8001bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001bca:	b973      	cbnz	r3, 8001bea <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8001bcc:	8923      	ldrh	r3, [r4, #8]
 8001bce:	b90b      	cbnz	r3, 8001bd4 <dir_sdi.constprop.11+0x20>
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8001bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bd6:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8001bd8:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8001bda:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f7      	beq.n	8001bd0 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001be0:	3430      	adds	r4, #48	; 0x30
 8001be2:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8001be4:	2000      	movs	r0, #0
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8001be8:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8001bea:	8961      	ldrh	r1, [r4, #10]
 8001bec:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8001bee:	b961      	cbnz	r1, 8001c0a <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	6828      	ldr	r0, [r5, #0]
 8001bf4:	f7ff fef6 	bl	80019e4 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001bf8:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8001bfa:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001bfc:	d00b      	beq.n	8001c16 <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8001bfe:	2801      	cmp	r0, #1
 8001c00:	d9e6      	bls.n	8001bd0 <dir_sdi.constprop.11+0x1c>
 8001c02:	6963      	ldr	r3, [r4, #20]
 8001c04:	4298      	cmp	r0, r3
 8001c06:	d3f3      	bcc.n	8001bf0 <dir_sdi.constprop.11+0x3c>
 8001c08:	e7e2      	b.n	8001bd0 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff fbcd 	bl	80013ac <clust2sect>
 8001c12:	61e8      	str	r0, [r5, #28]
 8001c14:	e7e0      	b.n	8001bd8 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001c16:	2001      	movs	r0, #1
}
 8001c18:	bd38      	pop	{r3, r4, r5, pc}

08001c1a <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001c1a:	69c3      	ldr	r3, [r0, #28]
{
 8001c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c20:	4605      	mov	r5, r0
 8001c22:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001c24:	b1ab      	cbz	r3, 8001c52 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8001c26:	6942      	ldr	r2, [r0, #20]
 8001c28:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001c2c:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8001c30:	d20f      	bcs.n	8001c52 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001c32:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8001c36:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001c38:	f1b9 0f00 	cmp.w	r9, #0
 8001c3c:	d14f      	bne.n	8001cde <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8001c3e:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8001c40:	3301      	adds	r3, #1
 8001c42:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8001c44:	b941      	cbnz	r1, 8001c58 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8001c46:	8923      	ldrh	r3, [r4, #8]
 8001c48:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8001c4c:	d847      	bhi.n	8001cde <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8001c52:	2004      	movs	r0, #4
 8001c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8001c58:	8963      	ldrh	r3, [r4, #10]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8001c60:	d13d      	bne.n	8001cde <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff febe 	bl	80019e4 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8001c68:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8001c6a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8001c6c:	d802      	bhi.n	8001c74 <dir_next+0x5a>
 8001c6e:	2002      	movs	r0, #2
 8001c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8001c74:	1c42      	adds	r2, r0, #1
 8001c76:	d102      	bne.n	8001c7e <dir_next+0x64>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8001c7e:	6963      	ldr	r3, [r4, #20]
 8001c80:	4298      	cmp	r0, r3
 8001c82:	d326      	bcc.n	8001cd2 <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8001c84:	2f00      	cmp	r7, #0
 8001c86:	d0e2      	beq.n	8001c4e <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8001c88:	69a9      	ldr	r1, [r5, #24]
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f7ff ff04 	bl	8001a98 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001c90:	4606      	mov	r6, r0
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d037      	beq.n	8001d06 <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8001c96:	2801      	cmp	r0, #1
 8001c98:	d0e9      	beq.n	8001c6e <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001c9a:	1c43      	adds	r3, r0, #1
 8001c9c:	d0ec      	beq.n	8001c78 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7ff fc19 	bl	80014d6 <sync_window>
 8001ca4:	4607      	mov	r7, r0
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d1e6      	bne.n	8001c78 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8001caa:	4601      	mov	r1, r0
 8001cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001cb4:	f7ff faf2 	bl	800129c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001cb8:	4631      	mov	r1, r6
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff fb76 	bl	80013ac <clust2sect>
						fs->wflag = 1;
 8001cc0:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001cc4:	62e0      	str	r0, [r4, #44]	; 0x2c
 8001cc6:	8963      	ldrh	r3, [r4, #10]
 8001cc8:	429f      	cmp	r7, r3
 8001cca:	d310      	bcc.n	8001cee <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8001ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cce:	1bdf      	subs	r7, r3, r7
 8001cd0:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8001cd2:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8001cd4:	4631      	mov	r1, r6
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7ff fb68 	bl	80013ac <clust2sect>
 8001cdc:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001cde:	3430      	adds	r4, #48	; 0x30
 8001ce0:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8001ce2:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001ce6:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8001ce8:	2000      	movs	r0, #0
 8001cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8001cee:	f884 a003 	strb.w	sl, [r4, #3]
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7ff fbcc 	bl	8001490 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d1bd      	bne.n	8001c78 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8001cfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cfe:	3301      	adds	r3, #1
 8001d00:	3701      	adds	r7, #1
 8001d02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d04:	e7df      	b.n	8001cc6 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001d06:	2007      	movs	r0, #7
}
 8001d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001d0c <follow_path>:
{
 8001d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8001d10:	6807      	ldr	r7, [r0, #0]
{
 8001d12:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8001d14:	780b      	ldrb	r3, [r1, #0]
 8001d16:	2b2f      	cmp	r3, #47	; 0x2f
 8001d18:	460d      	mov	r5, r1
 8001d1a:	f101 0101 	add.w	r1, r1, #1
 8001d1e:	d0f9      	beq.n	8001d14 <follow_path+0x8>
 8001d20:	2b5c      	cmp	r3, #92	; 0x5c
 8001d22:	d0f7      	beq.n	8001d14 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8001d24:	2300      	movs	r3, #0
 8001d26:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8001d28:	782b      	ldrb	r3, [r5, #0]
 8001d2a:	2b1f      	cmp	r3, #31
 8001d2c:	d959      	bls.n	8001de2 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001d2e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8001e8c <follow_path+0x180>
	p = *path; sfn = dp->fn;
 8001d32:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8001d36:	220b      	movs	r2, #11
 8001d38:	2120      	movs	r1, #32
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff faae 	bl	800129c <mem_set>
	si = i = 0; ni = 8;
 8001d40:	2200      	movs	r2, #0
 8001d42:	f105 3eff 	add.w	lr, r5, #4294967295
 8001d46:	4611      	mov	r1, r2
 8001d48:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8001d4a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001d4e:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8001d50:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001d54:	d90b      	bls.n	8001d6e <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8001d56:	2b2f      	cmp	r3, #47	; 0x2f
 8001d58:	d14b      	bne.n	8001df2 <follow_path+0xe6>
 8001d5a:	1868      	adds	r0, r5, r1
 8001d5c:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8001d5e:	f810 eb01 	ldrb.w	lr, [r0], #1
 8001d62:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8001d66:	d0f9      	beq.n	8001d5c <follow_path+0x50>
 8001d68:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8001d6c:	d0f6      	beq.n	8001d5c <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8001d6e:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d054      	beq.n	8001e1e <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8001d74:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8001d78:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8001d7c:	2ae5      	cmp	r2, #229	; 0xe5
 8001d7e:	bf04      	itt	eq
 8001d80:	2205      	moveq	r2, #5
 8001d82:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8001d86:	2b21      	cmp	r3, #33	; 0x21
 8001d88:	bf34      	ite	cc
 8001d8a:	2304      	movcc	r3, #4
 8001d8c:	2300      	movcs	r3, #0
 8001d8e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7ff ff0e 	bl	8001bb4 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d145      	bne.n	8001e28 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 8001d9c:	69e1      	ldr	r1, [r4, #28]
 8001d9e:	4648      	mov	r0, r9
 8001da0:	f7ff fbea 	bl	8001578 <move_window>
		if (res != FR_OK) break;
 8001da4:	2800      	cmp	r0, #0
 8001da6:	d13f      	bne.n	8001e28 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8001da8:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	d046      	beq.n	8001e3e <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8001db0:	7ada      	ldrb	r2, [r3, #11]
 8001db2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001db6:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8001db8:	7ada      	ldrb	r2, [r3, #11]
 8001dba:	0711      	lsls	r1, r2, #28
 8001dbc:	d40c      	bmi.n	8001dd8 <follow_path+0xcc>
 8001dbe:	f103 0e0b 	add.w	lr, r3, #11
 8001dc2:	4631      	mov	r1, r6
		r = *d++ - *s++;
 8001dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001dc8:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8001dcc:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8001dce:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 8001dd2:	d027      	beq.n	8001e24 <follow_path+0x118>
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	d0f5      	beq.n	8001dc4 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff ff1d 	bl	8001c1a <dir_next>
 8001de0:	e7da      	b.n	8001d98 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8001de8:	4620      	mov	r0, r4
}
 8001dea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8001dee:	f7ff bee1 	b.w	8001bb4 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8001df2:	2b5c      	cmp	r3, #92	; 0x5c
 8001df4:	d0b1      	beq.n	8001d5a <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8001df6:	2b2e      	cmp	r3, #46	; 0x2e
 8001df8:	d036      	beq.n	8001e68 <follow_path+0x15c>
 8001dfa:	4290      	cmp	r0, r2
 8001dfc:	d90f      	bls.n	8001e1e <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8001dfe:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8001e02:	bf18      	it	ne
 8001e04:	3b80      	subne	r3, #128	; 0x80
 8001e06:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8001e90 <follow_path+0x184>
 8001e0a:	bf18      	it	ne
 8001e0c:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8001e10:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8001e14:	f1bc 0f00 	cmp.w	ip, #0
 8001e18:	d02b      	beq.n	8001e72 <follow_path+0x166>
 8001e1a:	4563      	cmp	r3, ip
 8001e1c:	d1f8      	bne.n	8001e10 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8001e1e:	2006      	movs	r0, #6
	return res;
 8001e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8001e24:	2a00      	cmp	r2, #0
 8001e26:	d1d7      	bne.n	8001dd8 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8001e28:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8001e2c:	b148      	cbz	r0, 8001e42 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8001e2e:	2804      	cmp	r0, #4
 8001e30:	d129      	bne.n	8001e86 <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001e32:	f013 0f04 	tst.w	r3, #4
 8001e36:	bf08      	it	eq
 8001e38:	2005      	moveq	r0, #5
 8001e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001e3e:	2004      	movs	r0, #4
 8001e40:	e7f2      	b.n	8001e28 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001e42:	075a      	lsls	r2, r3, #29
 8001e44:	d41f      	bmi.n	8001e86 <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8001e46:	79a3      	ldrb	r3, [r4, #6]
 8001e48:	06db      	lsls	r3, r3, #27
 8001e4a:	d50a      	bpl.n	8001e62 <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8001e4c:	6963      	ldr	r3, [r4, #20]
 8001e4e:	7838      	ldrb	r0, [r7, #0]
 8001e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e54:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001e58:	4419      	add	r1, r3
 8001e5a:	f7ff faff 	bl	800145c <ld_clust.isra.1>
 8001e5e:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8001e60:	e767      	b.n	8001d32 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001e62:	2005      	movs	r0, #5
 8001e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8001e68:	280b      	cmp	r0, #11
 8001e6a:	d0d8      	beq.n	8001e1e <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	200b      	movs	r0, #11
 8001e70:	e76b      	b.n	8001d4a <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8001e72:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8001e76:	f1bc 0f19 	cmp.w	ip, #25
 8001e7a:	d801      	bhi.n	8001e80 <follow_path+0x174>
 8001e7c:	3b20      	subs	r3, #32
 8001e7e:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8001e80:	54b3      	strb	r3, [r6, r2]
 8001e82:	3201      	adds	r2, #1
 8001e84:	e761      	b.n	8001d4a <follow_path+0x3e>
}
 8001e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e8a:	bf00      	nop
 8001e8c:	08002c08 	.word	0x08002c08
 8001e90:	08002c87 	.word	0x08002c87

08001e94 <dir_register>:
{
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8001e98:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8001e9a:	f7ff fe8b 	bl	8001bb4 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	bb28      	cbnz	r0, 8001eee <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8001ea2:	69e9      	ldr	r1, [r5, #28]
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f7ff fb67 	bl	8001578 <move_window>
			if (res != FR_OK) break;
 8001eaa:	4604      	mov	r4, r0
 8001eac:	b9f8      	cbnz	r0, 8001eee <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8001eae:	6a2b      	ldr	r3, [r5, #32]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2be5      	cmp	r3, #229	; 0xe5
 8001eb4:	d114      	bne.n	8001ee0 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8001eb6:	69e9      	ldr	r1, [r5, #28]
 8001eb8:	4630      	mov	r0, r6
 8001eba:	f7ff fb5d 	bl	8001578 <move_window>
		if (res == FR_OK) {
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	b960      	cbnz	r0, 8001edc <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8001ec2:	4601      	mov	r1, r0
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	6a28      	ldr	r0, [r5, #32]
 8001ec8:	f7ff f9e8 	bl	800129c <mem_set>
 8001ecc:	220b      	movs	r2, #11
 8001ece:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8001ed2:	6a28      	ldr	r0, [r5, #32]
 8001ed4:	f7ff fab9 	bl	800144a <mem_cpy.part.0>
			fs->wflag = 1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	70f3      	strb	r3, [r6, #3]
}
 8001edc:	4620      	mov	r0, r4
 8001ede:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0e8      	beq.n	8001eb6 <dir_register+0x22>
			res = dir_next(dp, 1);
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	f7ff fe97 	bl	8001c1a <dir_next>
 8001eec:	e7d7      	b.n	8001e9e <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8001eee:	2c04      	cmp	r4, #4
 8001ef0:	bf08      	it	eq
 8001ef2:	2407      	moveq	r4, #7
 8001ef4:	e7f2      	b.n	8001edc <dir_register+0x48>
	...

08001ef8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8001ef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001efa:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8001efc:	a804      	add	r0, sp, #16
{
 8001efe:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8001f00:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8001f04:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8001f06:	f7ff fa6d 	bl	80013e4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001f0a:	1e05      	subs	r5, r0, #0
 8001f0c:	db1f      	blt.n	8001f4e <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8001f0e:	4912      	ldr	r1, [pc, #72]	; (8001f58 <f_mount+0x60>)
 8001f10:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8001f14:	b15c      	cbz	r4, 8001f2e <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <f_mount+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4294      	cmp	r4, r2
 8001f1c:	bf04      	itt	eq
 8001f1e:	2200      	moveq	r2, #0
 8001f20:	601a      	streq	r2, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	2000      	movs	r0, #0
 8001f26:	4294      	cmp	r4, r2
 8001f28:	bf08      	it	eq
 8001f2a:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8001f2c:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8001f2e:	9801      	ldr	r0, [sp, #4]
 8001f30:	b108      	cbz	r0, 8001f36 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8001f32:	2300      	movs	r3, #0
 8001f34:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8001f36:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8001f3a:	b130      	cbz	r0, 8001f4a <f_mount+0x52>
 8001f3c:	2e01      	cmp	r6, #1
 8001f3e:	d108      	bne.n	8001f52 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8001f40:	2200      	movs	r2, #0
 8001f42:	a901      	add	r1, sp, #4
 8001f44:	4668      	mov	r0, sp
 8001f46:	f7ff fb73 	bl	8001630 <find_volume>
	LEAVE_FF(fs, res);
}
 8001f4a:	b004      	add	sp, #16
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8001f4e:	200b      	movs	r0, #11
 8001f50:	e7fb      	b.n	8001f4a <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8001f52:	2000      	movs	r0, #0
 8001f54:	e7f9      	b.n	8001f4a <f_mount+0x52>
 8001f56:	bf00      	nop
 8001f58:	2000003c 	.word	0x2000003c
 8001f5c:	20000040 	.word	0x20000040

08001f60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8001f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f64:	b090      	sub	sp, #64	; 0x40
 8001f66:	4690      	mov	r8, r2
 8001f68:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	f000 80ce 	beq.w	800210e <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8001f72:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8001f76:	462a      	mov	r2, r5
 8001f78:	a903      	add	r1, sp, #12
 8001f7a:	a801      	add	r0, sp, #4
 8001f7c:	f7ff fb58 	bl	8001630 <find_volume>
	if (res == FR_OK) {
 8001f80:	4607      	mov	r7, r0
 8001f82:	bb38      	cbnz	r0, 8001fd4 <f_open+0x74>
		dj.obj.fs = fs;
 8001f84:	ae10      	add	r6, sp, #64	; 0x40
 8001f86:	9b03      	ldr	r3, [sp, #12]
 8001f88:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8001f8c:	9901      	ldr	r1, [sp, #4]
 8001f8e:	4630      	mov	r0, r6
 8001f90:	f7ff febc 	bl	8001d0c <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8001f94:	b958      	cbnz	r0, 8001fae <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8001f96:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db1e      	blt.n	8001fdc <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8001f9e:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8001fa2:	bf14      	ite	ne
 8001fa4:	2101      	movne	r1, #1
 8001fa6:	2100      	moveq	r1, #0
 8001fa8:	4630      	mov	r0, r6
 8001faa:	f7ff f97d 	bl	80012a8 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8001fae:	f018 0f1c 	tst.w	r8, #28
 8001fb2:	d073      	beq.n	800209c <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8001fb4:	b1a0      	cbz	r0, 8001fe0 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8001fb6:	2804      	cmp	r0, #4
 8001fb8:	d109      	bne.n	8001fce <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001fba:	4b71      	ldr	r3, [pc, #452]	; (8002180 <f_open+0x220>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	f000 80da 	beq.w	8002178 <f_open+0x218>
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80d6 	beq.w	8002178 <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8001fcc:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8001fce:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8001fd2:	b170      	cbz	r0, 8001ff2 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	6023      	str	r3, [r4, #0]
 8001fd8:	4607      	mov	r7, r0
 8001fda:	e092      	b.n	8002102 <f_open+0x1a2>
				res = FR_INVALID_NAME;
 8001fdc:	2006      	movs	r0, #6
 8001fde:	e7e6      	b.n	8001fae <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8001fe0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001fe4:	f013 0f11 	tst.w	r3, #17
 8001fe8:	d163      	bne.n	80020b2 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8001fea:	f018 0f04 	tst.w	r8, #4
 8001fee:	f040 80bd 	bne.w	800216c <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8001ff2:	0728      	lsls	r0, r5, #28
 8001ff4:	d53c      	bpl.n	8002070 <f_open+0x110>
				dw = GET_FATTIME();
 8001ff6:	f000 fa25 	bl	8002444 <get_fattime>
 8001ffa:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002000:	300e      	adds	r0, #14
 8002002:	f7ff f943 	bl	800128c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8002006:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002008:	4611      	mov	r1, r2
 800200a:	3016      	adds	r0, #22
 800200c:	f7ff f93e 	bl	800128c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002012:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002016:	2220      	movs	r2, #32
 8002018:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800201a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800201e:	f899 0000 	ldrb.w	r0, [r9]
 8002022:	4651      	mov	r1, sl
 8002024:	f7ff fa1a 	bl	800145c <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002028:	2200      	movs	r2, #0
 800202a:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800202c:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800202e:	4648      	mov	r0, r9
 8002030:	f7ff fa22 	bl	8001478 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8002034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8002036:	2200      	movs	r2, #0
 8002038:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800203a:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800203c:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800203e:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8002040:	9b03      	ldr	r3, [sp, #12]
 8002042:	2101      	movs	r1, #1
 8002044:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8002046:	f1b8 0f00 	cmp.w	r8, #0
 800204a:	d011      	beq.n	8002070 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 800204c:	4641      	mov	r1, r8
 800204e:	4630      	mov	r0, r6
						dw = fs->winsect;
 8002050:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8002054:	f7ff fd78 	bl	8001b48 <remove_chain>
						if (res == FR_OK) {
 8002058:	2800      	cmp	r0, #0
 800205a:	d1bb      	bne.n	8001fd4 <f_open+0x74>
							res = move_window(fs, dw);
 800205c:	4649      	mov	r1, r9
 800205e:	9803      	ldr	r0, [sp, #12]
 8002060:	f7ff fa8a 	bl	8001578 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002064:	9a03      	ldr	r2, [sp, #12]
 8002066:	f108 33ff 	add.w	r3, r8, #4294967295
 800206a:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 800206c:	2800      	cmp	r0, #0
 800206e:	d1b1      	bne.n	8001fd4 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002070:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8002072:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8002078:	bf48      	it	mi
 800207a:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800207e:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8002082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002084:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002086:	bf14      	ite	ne
 8002088:	2101      	movne	r1, #1
 800208a:	2100      	moveq	r1, #0
 800208c:	4630      	mov	r0, r6
 800208e:	f7ff f939 	bl	8001304 <inc_lock>
 8002092:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8002094:	2800      	cmp	r0, #0
 8002096:	d13c      	bne.n	8002112 <f_open+0x1b2>
 8002098:	2002      	movs	r0, #2
 800209a:	e79b      	b.n	8001fd4 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 800209c:	2800      	cmp	r0, #0
 800209e:	d199      	bne.n	8001fd4 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80020a0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80020a4:	06da      	lsls	r2, r3, #27
 80020a6:	d463      	bmi.n	8002170 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80020a8:	f018 0f02 	tst.w	r8, #2
 80020ac:	d0e0      	beq.n	8002070 <f_open+0x110>
 80020ae:	07db      	lsls	r3, r3, #31
 80020b0:	d5de      	bpl.n	8002070 <f_open+0x110>
					res = FR_DENIED;
 80020b2:	2007      	movs	r0, #7
 80020b4:	e78e      	b.n	8001fd4 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 80020b6:	6820      	ldr	r0, [r4, #0]
 80020b8:	f7ff fc94 	bl	80019e4 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 80020bc:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80020be:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80020c0:	d923      	bls.n	800210a <f_open+0x1aa>
 80020c2:	1c42      	adds	r2, r0, #1
 80020c4:	4250      	negs	r0, r2
 80020c6:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80020c8:	eba5 0508 	sub.w	r5, r5, r8
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d049      	beq.n	8002164 <f_open+0x204>
				fp->clust = clst;
 80020d0:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80020d2:	2800      	cmp	r0, #0
 80020d4:	f47f af7e 	bne.w	8001fd4 <f_open+0x74>
 80020d8:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80020dc:	b18b      	cbz	r3, 8002102 <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80020de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80020e2:	4640      	mov	r0, r8
 80020e4:	f7ff f962 	bl	80013ac <clust2sect>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d0d5      	beq.n	8002098 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80020ec:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 80020f0:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	4631      	mov	r1, r6
 80020f6:	f898 0001 	ldrb.w	r0, [r8, #1]
 80020fa:	f7ff f895 	bl	8001228 <disk_read>
 80020fe:	2800      	cmp	r0, #0
 8002100:	d138      	bne.n	8002174 <f_open+0x214>

	LEAVE_FF(fs, res);
}
 8002102:	4638      	mov	r0, r7
 8002104:	b010      	add	sp, #64	; 0x40
 8002106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 800210a:	2002      	movs	r0, #2
 800210c:	e7dc      	b.n	80020c8 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 800210e:	2709      	movs	r7, #9
 8002110:	e7f7      	b.n	8002102 <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002112:	9e03      	ldr	r6, [sp, #12]
 8002114:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002118:	7830      	ldrb	r0, [r6, #0]
 800211a:	4641      	mov	r1, r8
 800211c:	f7ff f99e 	bl	800145c <ld_clust.isra.1>
 8002120:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002122:	f108 001c 	add.w	r0, r8, #28
 8002126:	f7ff f8a9 	bl	800127c <ld_dword>
			fp->obj.id = fs->id;
 800212a:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800212c:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800212e:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002130:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002134:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8002136:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8002138:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 800213a:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800213c:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800213e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002140:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002146:	4630      	mov	r0, r6
 8002148:	f7ff f8a8 	bl	800129c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800214c:	06ab      	lsls	r3, r5, #26
 800214e:	d5d8      	bpl.n	8002102 <f_open+0x1a2>
 8002150:	68e5      	ldr	r5, [r4, #12]
 8002152:	2d00      	cmp	r5, #0
 8002154:	d0d5      	beq.n	8002102 <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002156:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002158:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800215a:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800215e:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002160:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002164:	45a8      	cmp	r8, r5
 8002166:	d3a6      	bcc.n	80020b6 <f_open+0x156>
 8002168:	2000      	movs	r0, #0
 800216a:	e7b1      	b.n	80020d0 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800216c:	2008      	movs	r0, #8
 800216e:	e731      	b.n	8001fd4 <f_open+0x74>
					res = FR_NO_FILE;
 8002170:	2004      	movs	r0, #4
 8002172:	e72f      	b.n	8001fd4 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002174:	2001      	movs	r0, #1
 8002176:	e72d      	b.n	8001fd4 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8002178:	4630      	mov	r0, r6
 800217a:	f7ff fe8b 	bl	8001e94 <dir_register>
 800217e:	e726      	b.n	8001fce <f_open+0x6e>
 8002180:	20000040 	.word	0x20000040

08002184 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8002184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002188:	469b      	mov	fp, r3
 800218a:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800218c:	2300      	movs	r3, #0
{
 800218e:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8002190:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8002194:	a903      	add	r1, sp, #12
{
 8002196:	4604      	mov	r4, r0
 8002198:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800219a:	f7ff f93b 	bl	8001414 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800219e:	4606      	mov	r6, r0
 80021a0:	bb00      	cbnz	r0, 80021e4 <f_read+0x60>
 80021a2:	7d66      	ldrb	r6, [r4, #21]
 80021a4:	b9f6      	cbnz	r6, 80021e4 <f_read+0x60>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80021a6:	7d23      	ldrb	r3, [r4, #20]
 80021a8:	07da      	lsls	r2, r3, #31
 80021aa:	f140 8096 	bpl.w	80022da <f_read+0x156>
	remain = fp->obj.objsize - fp->fptr;
 80021ae:	68e3      	ldr	r3, [r4, #12]
 80021b0:	69a7      	ldr	r7, [r4, #24]
 80021b2:	1bdf      	subs	r7, r3, r7
 80021b4:	42af      	cmp	r7, r5
 80021b6:	bf28      	it	cs
 80021b8:	462f      	movcs	r7, r5
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80021ba:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btr;								/* Repeat until all data read */
 80021be:	b18f      	cbz	r7, 80021e4 <f_read+0x60>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80021c0:	69a1      	ldr	r1, [r4, #24]
 80021c2:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d179      	bne.n	80022be <f_read+0x13a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80021ca:	9b03      	ldr	r3, [sp, #12]
 80021cc:	895b      	ldrh	r3, [r3, #10]
 80021ce:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80021d0:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	d119      	bne.n	800220c <f_read+0x88>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80021d8:	b941      	cbnz	r1, 80021ec <f_read+0x68>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80021da:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80021dc:	2801      	cmp	r0, #1
 80021de:	d810      	bhi.n	8002202 <f_read+0x7e>
 80021e0:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80021e2:	7566      	strb	r6, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80021e4:	4630      	mov	r0, r6
 80021e6:	b005      	add	sp, #20
 80021e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80021ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021ee:	b11b      	cbz	r3, 80021f8 <f_read+0x74>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80021f0:	4620      	mov	r0, r4
 80021f2:	f7ff f8e6 	bl	80013c2 <clmt_clust>
 80021f6:	e7f1      	b.n	80021dc <f_read+0x58>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80021f8:	69e1      	ldr	r1, [r4, #28]
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	f7ff fbf2 	bl	80019e4 <get_fat.isra.8>
 8002200:	e7ec      	b.n	80021dc <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002202:	1c43      	adds	r3, r0, #1
 8002204:	d101      	bne.n	800220a <f_read+0x86>
 8002206:	2601      	movs	r6, #1
 8002208:	e7eb      	b.n	80021e2 <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 800220a:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800220c:	9b03      	ldr	r3, [sp, #12]
 800220e:	69e1      	ldr	r1, [r4, #28]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f8ca 	bl	80013ac <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002218:	2800      	cmp	r0, #0
 800221a:	d0e1      	beq.n	80021e0 <f_read+0x5c>
			sect += csect;
 800221c:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 800221e:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8002220:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8002224:	d02d      	beq.n	8002282 <f_read+0xfe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002226:	9b00      	ldr	r3, [sp, #0]
 8002228:	9a01      	ldr	r2, [sp, #4]
 800222a:	895b      	ldrh	r3, [r3, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800222c:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800222e:	442a      	add	r2, r5
 8002230:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8002232:	bf88      	it	hi
 8002234:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002236:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 8002238:	bf88      	it	hi
 800223a:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800223c:	462b      	mov	r3, r5
 800223e:	4642      	mov	r2, r8
 8002240:	4649      	mov	r1, r9
 8002242:	f7fe fff1 	bl	8001228 <disk_read>
 8002246:	2800      	cmp	r0, #0
 8002248:	d1dd      	bne.n	8002206 <f_read+0x82>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800224a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	da0b      	bge.n	800226a <f_read+0xe6>
 8002252:	6a20      	ldr	r0, [r4, #32]
 8002254:	eba0 0008 	sub.w	r0, r0, r8
 8002258:	4285      	cmp	r5, r0
 800225a:	d906      	bls.n	800226a <f_read+0xe6>
 800225c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002260:	4651      	mov	r1, sl
 8002262:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8002266:	f7ff f8f0 	bl	800144a <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800226a:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800226c:	69a3      	ldr	r3, [r4, #24]
 800226e:	442b      	add	r3, r5
 8002270:	61a3      	str	r3, [r4, #24]
 8002272:	f8db 3000 	ldr.w	r3, [fp]
 8002276:	442b      	add	r3, r5
 8002278:	44a9      	add	r9, r5
 800227a:	f8cb 3000 	str.w	r3, [fp]
 800227e:	1b7f      	subs	r7, r7, r5
 8002280:	e79d      	b.n	80021be <f_read+0x3a>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8002282:	6a22      	ldr	r2, [r4, #32]
 8002284:	4590      	cmp	r8, r2
 8002286:	d018      	beq.n	80022ba <f_read+0x136>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8002288:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	da0b      	bge.n	80022a8 <f_read+0x124>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002290:	9800      	ldr	r0, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	4651      	mov	r1, sl
 8002296:	7840      	ldrb	r0, [r0, #1]
 8002298:	f7fe ffd4 	bl	8001244 <disk_write>
 800229c:	2800      	cmp	r0, #0
 800229e:	d1b2      	bne.n	8002206 <f_read+0x82>
					fp->flag &= (BYTE)~FA_DIRTY;
 80022a0:	7d23      	ldrb	r3, [r4, #20]
 80022a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a6:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80022a8:	9803      	ldr	r0, [sp, #12]
 80022aa:	2301      	movs	r3, #1
 80022ac:	4642      	mov	r2, r8
 80022ae:	4651      	mov	r1, sl
 80022b0:	7840      	ldrb	r0, [r0, #1]
 80022b2:	f7fe ffb9 	bl	8001228 <disk_read>
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d1a5      	bne.n	8002206 <f_read+0x82>
			fp->sect = sect;
 80022ba:	f8c4 8020 	str.w	r8, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80022be:	69a1      	ldr	r1, [r4, #24]
 80022c0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80022c4:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 80022c8:	42bd      	cmp	r5, r7
 80022ca:	bf28      	it	cs
 80022cc:	463d      	movcs	r5, r7
 80022ce:	462a      	mov	r2, r5
 80022d0:	4451      	add	r1, sl
 80022d2:	4648      	mov	r0, r9
 80022d4:	f7ff f8b9 	bl	800144a <mem_cpy.part.0>
 80022d8:	e7c8      	b.n	800226c <f_read+0xe8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80022da:	2607      	movs	r6, #7
 80022dc:	e782      	b.n	80021e4 <f_read+0x60>

080022de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80022de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80022e0:	a901      	add	r1, sp, #4
{
 80022e2:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80022e4:	f7ff f896 	bl	8001414 <validate>
	if (res == FR_OK) {
 80022e8:	4605      	mov	r5, r0
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d13a      	bne.n	8002364 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80022ee:	7d23      	ldrb	r3, [r4, #20]
 80022f0:	065a      	lsls	r2, r3, #25
 80022f2:	d537      	bpl.n	8002364 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	d50c      	bpl.n	8002312 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80022f8:	9801      	ldr	r0, [sp, #4]
 80022fa:	6a22      	ldr	r2, [r4, #32]
 80022fc:	7840      	ldrb	r0, [r0, #1]
 80022fe:	2301      	movs	r3, #1
 8002300:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002304:	f7fe ff9e 	bl	8001244 <disk_write>
 8002308:	bb78      	cbnz	r0, 800236a <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800230a:	7d23      	ldrb	r3, [r4, #20]
 800230c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002310:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8002312:	f000 f897 	bl	8002444 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8002316:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8002318:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800231a:	9801      	ldr	r0, [sp, #4]
 800231c:	f7ff f92c 	bl	8001578 <move_window>
				if (res == FR_OK) {
 8002320:	4605      	mov	r5, r0
 8002322:	b9f8      	cbnz	r0, 8002364 <f_sync+0x86>
					dir = fp->dir_ptr;
 8002324:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8002326:	7af3      	ldrb	r3, [r6, #11]
 8002328:	f043 0320 	orr.w	r3, r3, #32
 800232c:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800232e:	68a2      	ldr	r2, [r4, #8]
 8002330:	6820      	ldr	r0, [r4, #0]
 8002332:	4631      	mov	r1, r6
 8002334:	f7ff f8a0 	bl	8001478 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8002338:	68e1      	ldr	r1, [r4, #12]
 800233a:	f106 001c 	add.w	r0, r6, #28
 800233e:	f7fe ffa5 	bl	800128c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8002342:	4639      	mov	r1, r7
 8002344:	f106 0016 	add.w	r0, r6, #22
 8002348:	f7fe ffa0 	bl	800128c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 800234c:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800234e:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8002350:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8002352:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8002354:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8002356:	f7ff f8c4 	bl	80014e2 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800235a:	7d23      	ldrb	r3, [r4, #20]
 800235c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8002360:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8002362:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8002364:	4628      	mov	r0, r5
 8002366:	b003      	add	sp, #12
 8002368:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800236a:	2501      	movs	r5, #1
 800236c:	e7fa      	b.n	8002364 <f_sync+0x86>

0800236e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800236e:	b513      	push	{r0, r1, r4, lr}
 8002370:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8002372:	f7ff ffb4 	bl	80022de <f_sync>
	if (res == FR_OK)
 8002376:	b948      	cbnz	r0, 800238c <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8002378:	a901      	add	r1, sp, #4
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff f84a 	bl	8001414 <validate>
		if (res == FR_OK) {
 8002380:	b920      	cbnz	r0, 800238c <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8002382:	6920      	ldr	r0, [r4, #16]
 8002384:	f7fe fffa 	bl	800137c <dec_lock>
			if (res == FR_OK)
 8002388:	b900      	cbnz	r0, 800238c <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800238a:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800238c:	b002      	add	sp, #8
 800238e:	bd10      	pop	{r4, pc}

08002390 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8002390:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002394:	4606      	mov	r6, r0
 8002396:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
 8002398:	4605      	mov	r5, r0
	int n = 0;
 800239a:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800239c:	1e4f      	subs	r7, r1, #1
 800239e:	42bc      	cmp	r4, r7
 80023a0:	da12      	bge.n	80023c8 <f_gets+0x38>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80023a2:	ab01      	add	r3, sp, #4
 80023a4:	2201      	movs	r2, #1
 80023a6:	4669      	mov	r1, sp
 80023a8:	4640      	mov	r0, r8
 80023aa:	f7ff feeb 	bl	8002184 <f_read>
		if (rc != 1) break;
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d109      	bne.n	80023c8 <f_gets+0x38>
		c = s[0];
 80023b4:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80023b8:	2b0d      	cmp	r3, #13
 80023ba:	d0f0      	beq.n	800239e <f_gets+0xe>
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
 80023bc:	2b0a      	cmp	r3, #10
		*p++ = c;
 80023be:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 80023c2:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 80023c6:	d1ea      	bne.n	800239e <f_gets+0xe>
	}
	*p = 0;
 80023c8:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80023ca:	429c      	cmp	r4, r3
}
 80023cc:	bf14      	ite	ne
 80023ce:	4630      	movne	r0, r6
 80023d0:	4618      	moveq	r0, r3
	*p = 0;
 80023d2:	702b      	strb	r3, [r5, #0]
}
 80023d4:	b002      	add	sp, #8
 80023d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080023dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80023dc:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <FATFS_LinkDriverEx+0x40>)
 80023e0:	7a5d      	ldrb	r5, [r3, #9]
 80023e2:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 80023e6:	b9b5      	cbnz	r5, 8002416 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80023e8:	7a5d      	ldrb	r5, [r3, #9]
 80023ea:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80023ec:	7a5d      	ldrb	r5, [r3, #9]
 80023ee:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80023f2:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80023f4:	7a58      	ldrb	r0, [r3, #9]
 80023f6:	4418      	add	r0, r3
 80023f8:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80023fa:	7a5a      	ldrb	r2, [r3, #9]
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	1c50      	adds	r0, r2, #1
 8002400:	b2c0      	uxtb	r0, r0
 8002402:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8002404:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8002406:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8002408:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800240a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800240c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800240e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8002410:	70cc      	strb	r4, [r1, #3]
 8002412:	4620      	mov	r0, r4
 8002414:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8002416:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8002418:	bd30      	pop	{r4, r5, pc}
 800241a:	bf00      	nop
 800241c:	20000064 	.word	0x20000064

08002420 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	f7ff bfdb 	b.w	80023dc <FATFS_LinkDriverEx>
	...

08002428 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002428:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800242a:	4903      	ldr	r1, [pc, #12]	; (8002438 <MX_FATFS_Init+0x10>)
 800242c:	4803      	ldr	r0, [pc, #12]	; (800243c <MX_FATFS_Init+0x14>)
 800242e:	f7ff fff7 	bl	8002420 <FATFS_LinkDriver>
 8002432:	4b03      	ldr	r3, [pc, #12]	; (8002440 <MX_FATFS_Init+0x18>)
 8002434:	7018      	strb	r0, [r3, #0]
 8002436:	bd08      	pop	{r3, pc}
 8002438:	20000078 	.word	0x20000078
 800243c:	2000000c 	.word	0x2000000c
 8002440:	2000007c 	.word	0x2000007c

08002444 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8002444:	2000      	movs	r0, #0
 8002446:	4770      	bx	lr

08002448 <SD_Card_Read>:
/**
  * @brief Read a file from SD card
  * @retval file
  */
void SD_Card_Read(/*char* buffer, int length*/)
{
 8002448:	b500      	push	{lr}
 800244a:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
	char buffer[100];
	int length = 100;
	FATFS fs;
	FIL rom;
	if(f_mount(&fs, "", 0) == FR_OK)
 800244e:	2200      	movs	r2, #0
 8002450:	490e      	ldr	r1, [pc, #56]	; (800248c <SD_Card_Read+0x44>)
 8002452:	a81a      	add	r0, sp, #104	; 0x68
 8002454:	f7ff fd50 	bl	8001ef8 <f_mount>
 8002458:	b998      	cbnz	r0, 8002482 <SD_Card_Read+0x3a>
	{
		if(f_open(&rom, "Hello.txt", FA_READ) == FR_OK)
 800245a:	2201      	movs	r2, #1
 800245c:	490c      	ldr	r1, [pc, #48]	; (8002490 <SD_Card_Read+0x48>)
 800245e:	a8a6      	add	r0, sp, #664	; 0x298
 8002460:	f7ff fd7e 	bl	8001f60 <f_open>
 8002464:	b968      	cbnz	r0, 8002482 <SD_Card_Read+0x3a>
		{
			f_gets(buffer, length, &rom);
 8002466:	aaa6      	add	r2, sp, #664	; 0x298
 8002468:	2164      	movs	r1, #100	; 0x64
 800246a:	a801      	add	r0, sp, #4
 800246c:	f7ff ff90 	bl	8002390 <f_gets>
			f_close(&rom);
 8002470:	a8a6      	add	r0, sp, #664	; 0x298
 8002472:	f7ff ff7c 	bl	800236e <f_close>
			HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8002476:	2201      	movs	r2, #1
 8002478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <SD_Card_Read+0x4c>)
 800247e:	f7fe f9f1 	bl	8000864 <HAL_GPIO_WritePin>
		}
	}
}
 8002482:	f20d 4dcc 	addw	sp, sp, #1228	; 0x4cc
 8002486:	f85d fb04 	ldr.w	pc, [sp], #4
 800248a:	bf00      	nop
 800248c:	08002ca3 	.word	0x08002ca3
 8002490:	08002c97 	.word	0x08002c97
 8002494:	40021800 	.word	0x40021800

08002498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002498:	b530      	push	{r4, r5, lr}
 800249a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249c:	2230      	movs	r2, #48	; 0x30
 800249e:	2100      	movs	r1, #0
 80024a0:	a808      	add	r0, sp, #32
 80024a2:	f000 fb9d 	bl	8002be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a6:	2100      	movs	r1, #0
 80024a8:	2214      	movs	r2, #20
 80024aa:	a803      	add	r0, sp, #12
 80024ac:	f000 fb98 	bl	8002be0 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	2400      	movs	r4, #0
 80024b2:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <SystemClock_Config+0x90>)
 80024b4:	9401      	str	r4, [sp, #4]
 80024b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <SystemClock_Config+0x94>)
 80024ca:	9402      	str	r4, [sp, #8]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d6:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e0:	2301      	movs	r3, #1
 80024e2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e4:	2310      	movs	r3, #16
 80024e6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024e8:	2308      	movs	r3, #8
 80024ea:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80024ec:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024ee:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 180;
 80024f0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024f4:	2304      	movs	r3, #4
 80024f6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024f8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024fa:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024fc:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fe:	f7fe f9f3 	bl	80008e8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002502:	f7fe f9b5 	bl	8000870 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002506:	230f      	movs	r3, #15
 8002508:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800250a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800250e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002510:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002516:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002518:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800251c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800251e:	f7fe fb93 	bl	8000c48 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002522:	b015      	add	sp, #84	; 0x54
 8002524:	bd30      	pop	{r4, r5, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000

08002530 <main>:
{
 8002530:	b500      	push	{lr}
 8002532:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002534:	f7fe f80e 	bl	8000554 <HAL_Init>
  printf("\n\n\n");
 8002538:	482c      	ldr	r0, [pc, #176]	; (80025ec <main+0xbc>)
 800253a:	f000 fadf 	bl	8002afc <puts>
  SystemClock_Config();
 800253e:	f7ff ffab 	bl	8002498 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002542:	2214      	movs	r2, #20
 8002544:	2100      	movs	r1, #0
 8002546:	a803      	add	r0, sp, #12
 8002548:	f000 fb4a 	bl	8002be0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254c:	2400      	movs	r4, #0
 800254e:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <main+0xc0>)
 8002550:	9401      	str	r4, [sp, #4]
 8002552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002554:	4827      	ldr	r0, [pc, #156]	; (80025f4 <main+0xc4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
 800255c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255e:	f002 0201 	and.w	r2, r2, #1
 8002562:	9201      	str	r2, [sp, #4]
 8002564:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002566:	9402      	str	r4, [sp, #8]
 8002568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002578:	4622      	mov	r2, r4
 800257a:	2110      	movs	r1, #16
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800257c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800257e:	f7fe f971 	bl	8000864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002582:	4622      	mov	r2, r4
 8002584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002588:	481b      	ldr	r0, [pc, #108]	; (80025f8 <main+0xc8>)
 800258a:	f7fe f96b 	bl	8000864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258e:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002590:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	a903      	add	r1, sp, #12
 8002594:	4817      	ldr	r0, [pc, #92]	; (80025f4 <main+0xc4>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002596:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f7fe f875 	bl	800068c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a6:	a903      	add	r1, sp, #12
 80025a8:	4813      	ldr	r0, [pc, #76]	; (80025f8 <main+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025aa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ac:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025b2:	f7fe f86b 	bl	800068c <HAL_GPIO_Init>
  MX_FATFS_Init();
 80025b6:	f7ff ff37 	bl	8002428 <MX_FATFS_Init>
  hspi1.Instance = SPI1;
 80025ba:	4810      	ldr	r0, [pc, #64]	; (80025fc <main+0xcc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025bc:	4a10      	ldr	r2, [pc, #64]	; (8002600 <main+0xd0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025be:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80025c4:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025cc:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025ce:	2308      	movs	r3, #8
 80025d0:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 80025d2:	230a      	movs	r3, #10
 80025d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d6:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d8:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025da:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025dc:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025de:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e0:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025e2:	f7fe fc22 	bl	8000e2a <HAL_SPI_Init>
  SD_Card_Read();
 80025e6:	f7ff ff2f 	bl	8002448 <SD_Card_Read>
 80025ea:	e7fe      	b.n	80025ea <main+0xba>
 80025ec:	08002ca1 	.word	0x08002ca1
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40021800 	.word	0x40021800
 80025fc:	200004e0 	.word	0x200004e0
 8002600:	40013000 	.word	0x40013000

08002604 <SPI_WriteByte>:
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
	HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, 1000);
	return data;
}

static void SPI_WriteByte(u8 data) {
 8002604:	b507      	push	{r0, r1, r2, lr}
 8002606:	f88d 0007 	strb.w	r0, [sp, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800260a:	4808      	ldr	r0, [pc, #32]	; (800262c <SPI_WriteByte+0x28>)
 800260c:	f7fe fdef 	bl	80011ee <HAL_SPI_GetState>
 8002610:	2801      	cmp	r0, #1
 8002612:	4602      	mov	r2, r0
 8002614:	d1f9      	bne.n	800260a <SPI_WriteByte+0x6>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8002616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261a:	f10d 0107 	add.w	r1, sp, #7
 800261e:	4803      	ldr	r0, [pc, #12]	; (800262c <SPI_WriteByte+0x28>)
 8002620:	f7fe fc40 	bl	8000ea4 <HAL_SPI_Transmit>
}
 8002624:	b003      	add	sp, #12
 8002626:	f85d fb04 	ldr.w	pc, [sp], #4
 800262a:	bf00      	nop
 800262c:	200004e0 	.word	0x200004e0

08002630 <SD_Select>:

static void SD_Select(void) {
	HAL_GPIO_WritePin(SD_SPI_PORT, SD_SPI_SS_PIN, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	2110      	movs	r1, #16
 8002634:	4801      	ldr	r0, [pc, #4]	; (800263c <SD_Select+0xc>)
 8002636:	f7fe b915 	b.w	8000864 <HAL_GPIO_WritePin>
 800263a:	bf00      	nop
 800263c:	40020000 	.word	0x40020000

08002640 <SD_Deselect>:
}

static void SD_Deselect(void) {
	HAL_GPIO_WritePin(SD_SPI_PORT, SD_SPI_SS_PIN, GPIO_PIN_SET);
 8002640:	2201      	movs	r2, #1
 8002642:	2110      	movs	r1, #16
 8002644:	4801      	ldr	r0, [pc, #4]	; (800264c <SD_Deselect+0xc>)
 8002646:	f7fe b90d 	b.w	8000864 <HAL_GPIO_WritePin>
 800264a:	bf00      	nop
 800264c:	40020000 	.word	0x40020000

08002650 <SPI_ReadByte>:
static u8 SPI_ReadByte(void) {
 8002650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u8 dummy = 0xFF;
 8002652:	23ff      	movs	r3, #255	; 0xff
 8002654:	f88d 300e 	strb.w	r3, [sp, #14]
	u8 data = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	f88d 300f 	strb.w	r3, [sp, #15]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800265e:	480a      	ldr	r0, [pc, #40]	; (8002688 <SPI_ReadByte+0x38>)
 8002660:	f7fe fdc5 	bl	80011ee <HAL_SPI_GetState>
 8002664:	2801      	cmp	r0, #1
 8002666:	4603      	mov	r3, r0
 8002668:	d1f9      	bne.n	800265e <SPI_ReadByte+0xe>
	HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, 1000);
 800266a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800266e:	9200      	str	r2, [sp, #0]
 8002670:	f10d 010e 	add.w	r1, sp, #14
 8002674:	f10d 020f 	add.w	r2, sp, #15
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <SPI_ReadByte+0x38>)
 800267a:	f7fe fcbc 	bl	8000ff6 <HAL_SPI_TransmitReceive>
}
 800267e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002682:	b005      	add	sp, #20
 8002684:	f85d fb04 	ldr.w	pc, [sp], #4
 8002688:	200004e0 	.word	0x200004e0

0800268c <SD_SendCommand>:
		if (SPI_ReadByte() == 0xFF) return 1;
	}
	return 0;
}

static u8 SD_SendCommand(u8 cmd, u32 arg) {
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	4605      	mov	r5, r0
 8002690:	460c      	mov	r4, r1
 8002692:	f241 3688 	movw	r6, #5000	; 0x1388
		if (SPI_ReadByte() == 0xFF) return 1;
 8002696:	f7ff ffdb 	bl	8002650 <SPI_ReadByte>
 800269a:	28ff      	cmp	r0, #255	; 0xff
 800269c:	d011      	beq.n	80026c2 <SD_SendCommand+0x36>
	for (int i = 0; i < 5000; i++) {
 800269e:	3e01      	subs	r6, #1
 80026a0:	d1f9      	bne.n	8002696 <SD_SendCommand+0xa>
	u8 r;
	u8 crc = 0;
	// Wait for SD card to be ready
	if (!SD_CheckReady()) return 0xFF;
 80026a2:	20ff      	movs	r0, #255	; 0xff
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
	SPI_WriteByte((u8)(arg >> 24));
	SPI_WriteByte((u8)(arg >> 16));
	SPI_WriteByte((u8)(arg >> 8));
	SPI_WriteByte((u8)(arg));
	if (cmd == CMD0) crc = 0x95;
	if (cmd == CMD8) crc = 0x87;
 80026a6:	2d48      	cmp	r5, #72	; 0x48
 80026a8:	bf14      	ite	ne
 80026aa:	2000      	movne	r0, #0
 80026ac:	2087      	moveq	r0, #135	; 0x87
	SPI_WriteByte(crc);
 80026ae:	f7ff ffa9 	bl	8002604 <SPI_WriteByte>
 80026b2:	2408      	movs	r4, #8
	// Wait for a valid response
	for (int i = 0; i < 8; i++) {
		r = SPI_ReadByte();
 80026b4:	f7ff ffcc 	bl	8002650 <SPI_ReadByte>
		if ((r & 0x80) == 0) break;
 80026b8:	0603      	lsls	r3, r0, #24
 80026ba:	d517      	bpl.n	80026ec <SD_SendCommand+0x60>
	for (int i = 0; i < 8; i++) {
 80026bc:	3c01      	subs	r4, #1
 80026be:	d1f9      	bne.n	80026b4 <SD_SendCommand+0x28>
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
	SPI_WriteByte(cmd);
 80026c2:	4628      	mov	r0, r5
 80026c4:	f7ff ff9e 	bl	8002604 <SPI_WriteByte>
	SPI_WriteByte((u8)(arg >> 24));
 80026c8:	0e20      	lsrs	r0, r4, #24
 80026ca:	f7ff ff9b 	bl	8002604 <SPI_WriteByte>
	SPI_WriteByte((u8)(arg >> 16));
 80026ce:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80026d2:	f7ff ff97 	bl	8002604 <SPI_WriteByte>
	SPI_WriteByte((u8)(arg >> 8));
 80026d6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80026da:	f7ff ff93 	bl	8002604 <SPI_WriteByte>
	SPI_WriteByte((u8)(arg));
 80026de:	b2e0      	uxtb	r0, r4
 80026e0:	f7ff ff90 	bl	8002604 <SPI_WriteByte>
	if (cmd == CMD0) crc = 0x95;
 80026e4:	2d40      	cmp	r5, #64	; 0x40
 80026e6:	d1de      	bne.n	80026a6 <SD_SendCommand+0x1a>
 80026e8:	2095      	movs	r0, #149	; 0x95
 80026ea:	e7e0      	b.n	80026ae <SD_SendCommand+0x22>
	}
	return r;
}
 80026ec:	bd70      	pop	{r4, r5, r6, pc}

080026ee <SD_ReadBlock>:

static void SD_ReadBlock(BYTE* buff, UINT* count) {
 80026ee:	b570      	push	{r4, r5, r6, lr}
 80026f0:	4604      	mov	r4, r0
 80026f2:	460d      	mov	r5, r1
			buff++;
		}
		// Throw away CRC
		SPI_ReadByte();
		SPI_ReadByte();
	} while (count-- > 0);
 80026f4:	2680      	movs	r6, #128	; 0x80
			token = SPI_ReadByte();
 80026f6:	f7ff ffab 	bl	8002650 <SPI_ReadByte>
			if (token != 0xFF) break;
 80026fa:	28ff      	cmp	r0, #255	; 0xff
 80026fc:	d104      	bne.n	8002708 <SD_ReadBlock+0x1a>
		for (int j = 0; j < 128; j++) {
 80026fe:	3e01      	subs	r6, #1
 8002700:	d1f9      	bne.n	80026f6 <SD_ReadBlock+0x8>
 8002702:	bd70      	pop	{r4, r5, r6, pc}
	} while (count-- > 0);
 8002704:	461d      	mov	r5, r3
 8002706:	e7f5      	b.n	80026f4 <SD_ReadBlock+0x6>
		if (token != 0xFE) return;
 8002708:	28fe      	cmp	r0, #254	; 0xfe
 800270a:	d10e      	bne.n	800272a <SD_ReadBlock+0x3c>
 800270c:	f504 7600 	add.w	r6, r4, #512	; 0x200
			*buff = SPI_ReadByte();
 8002710:	f7ff ff9e 	bl	8002650 <SPI_ReadByte>
 8002714:	f804 0b01 	strb.w	r0, [r4], #1
		for (int i = 0; i < 512; i++) {
 8002718:	42b4      	cmp	r4, r6
 800271a:	d1f9      	bne.n	8002710 <SD_ReadBlock+0x22>
		SPI_ReadByte();
 800271c:	f7ff ff98 	bl	8002650 <SPI_ReadByte>
		SPI_ReadByte();
 8002720:	f7ff ff96 	bl	8002650 <SPI_ReadByte>
	} while (count-- > 0);
 8002724:	1f2b      	subs	r3, r5, #4
 8002726:	2d00      	cmp	r5, #0
 8002728:	d1ec      	bne.n	8002704 <SD_ReadBlock+0x16>
 800272a:	bd70      	pop	{r4, r5, r6, pc}

0800272c <SD_initialize>:
}

/* Driver functions */
DSTATUS SD_initialize (BYTE pdrv) {
 800272c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u8 r, ocr[4];
	// Reduce SCLK to ~400kHz
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002730:	4d79      	ldr	r5, [pc, #484]	; (8002918 <SD_initialize+0x1ec>)
DSTATUS SD_initialize (BYTE pdrv) {
 8002732:	4604      	mov	r4, r0
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002734:	2338      	movs	r3, #56	; 0x38
	HAL_SPI_Init(&hspi1);
 8002736:	4628      	mov	r0, r5
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002738:	61eb      	str	r3, [r5, #28]
	HAL_SPI_Init(&hspi1);
 800273a:	f7fe fb76 	bl	8000e2a <HAL_SPI_Init>
	// Single drive hardware should only have drive 0
	if (pdrv != 0) return STA_NOINIT;
 800273e:	b11c      	cbz	r4, 8002748 <SD_initialize+0x1c>
 8002740:	2001      	movs	r0, #1
	if (type != 0) stat &= ~STA_NOINIT;
	// Increase SCLK back to ~25MHz
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
	HAL_SPI_Init(&hspi1);
	return stat;
}
 8002742:	b003      	add	sp, #12
 8002744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(stat & STA_NODISK) return stat;
 8002748:	4b74      	ldr	r3, [pc, #464]	; (800291c <SD_initialize+0x1f0>)
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	f012 0f02 	tst.w	r2, #2
 8002750:	461e      	mov	r6, r3
 8002752:	d002      	beq.n	800275a <SD_initialize+0x2e>
 8002754:	7818      	ldrb	r0, [r3, #0]
	return stat;
 8002756:	b2c0      	uxtb	r0, r0
 8002758:	e7f3      	b.n	8002742 <SD_initialize+0x16>
	HAL_Delay(1);
 800275a:	2001      	movs	r0, #1
 800275c:	f7fd ff26 	bl	80005ac <HAL_Delay>
	SD_Deselect();
 8002760:	f7ff ff6e 	bl	8002640 <SD_Deselect>
 8002764:	240a      	movs	r4, #10
	for (int i = 0; i < 10; i++) SPI_WriteByte(0xFF);
 8002766:	20ff      	movs	r0, #255	; 0xff
 8002768:	f7ff ff4c 	bl	8002604 <SPI_WriteByte>
 800276c:	3c01      	subs	r4, #1
 800276e:	d1fa      	bne.n	8002766 <SD_initialize+0x3a>
	SD_Select();
 8002770:	f7ff ff5e 	bl	8002630 <SD_Select>
	r = SD_SendCommand(CMD0, 0);
 8002774:	4621      	mov	r1, r4
 8002776:	2040      	movs	r0, #64	; 0x40
 8002778:	f7ff ff88 	bl	800268c <SD_SendCommand>
 800277c:	2780      	movs	r7, #128	; 0x80
 800277e:	4604      	mov	r4, r0
		if (r == 0x01) {
 8002780:	2c01      	cmp	r4, #1
 8002782:	d17a      	bne.n	800287a <SD_initialize+0x14e>
			printf("CMD0 success\n");
 8002784:	4866      	ldr	r0, [pc, #408]	; (8002920 <SD_initialize+0x1f4>)
 8002786:	f000 f9b9 	bl	8002afc <puts>
	SD_Deselect();
 800278a:	f7ff ff59 	bl	8002640 <SD_Deselect>
	if (r != 0x01) return STA_NOINIT;
 800278e:	2c01      	cmp	r4, #1
 8002790:	d1d6      	bne.n	8002740 <SD_initialize+0x14>
	SPI_WriteByte(0xFF);
 8002792:	20ff      	movs	r0, #255	; 0xff
 8002794:	f7ff ff36 	bl	8002604 <SPI_WriteByte>
	SD_Select();
 8002798:	f7ff ff4a 	bl	8002630 <SD_Select>
	r = SD_SendCommand(CMD8, 0x1AA);
 800279c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80027a0:	2048      	movs	r0, #72	; 0x48
 80027a2:	f7ff ff73 	bl	800268c <SD_SendCommand>
	if (r == 0x01) {
 80027a6:	2801      	cmp	r0, #1
 80027a8:	f040 8087 	bne.w	80028ba <SD_initialize+0x18e>
		printf("CMD8 success\n");
 80027ac:	485d      	ldr	r0, [pc, #372]	; (8002924 <SD_initialize+0x1f8>)
 80027ae:	f000 f9a5 	bl	8002afc <puts>
		for (int i = 0; i < 4; i++) ocr[i] = SPI_ReadByte();
 80027b2:	2400      	movs	r4, #0
 80027b4:	f10d 0804 	add.w	r8, sp, #4
 80027b8:	f7ff ff4a 	bl	8002650 <SPI_ReadByte>
 80027bc:	f808 0004 	strb.w	r0, [r8, r4]
 80027c0:	3401      	adds	r4, #1
 80027c2:	2c04      	cmp	r4, #4
 80027c4:	d1f8      	bne.n	80027b8 <SD_initialize+0x8c>
		if ((ocr[2] << 2) | (ocr[3] == 0x1AA)) {
 80027c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d043      	beq.n	8002856 <SD_initialize+0x12a>
			printf("0x1AA matched\n");
 80027ce:	4856      	ldr	r0, [pc, #344]	; (8002928 <SD_initialize+0x1fc>)
								printf("CMD55/41 success\n");
 80027d0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800292c <SD_initialize+0x200>
			printf("0x1AA matched\n");
 80027d4:	f000 f992 	bl	8002afc <puts>
			SD_Deselect();
 80027d8:	f7ff ff32 	bl	8002640 <SD_Deselect>
			SPI_WriteByte(0xFF);
 80027dc:	20ff      	movs	r0, #255	; 0xff
 80027de:	f7ff ff11 	bl	8002604 <SPI_WriteByte>
			SD_Select();
 80027e2:	f7ff ff25 	bl	8002630 <SD_Select>
 80027e6:	2480      	movs	r4, #128	; 0x80
				if (SD_SendCommand(CMD55, 0) <= 0x01) {
 80027e8:	2100      	movs	r1, #0
 80027ea:	2077      	movs	r0, #119	; 0x77
 80027ec:	f7ff ff4e 	bl	800268c <SD_SendCommand>
 80027f0:	2801      	cmp	r0, #1
 80027f2:	d85c      	bhi.n	80028ae <SD_initialize+0x182>
					SD_Deselect();
 80027f4:	f7ff ff24 	bl	8002640 <SD_Deselect>
					SPI_WriteByte(0xFF);
 80027f8:	20ff      	movs	r0, #255	; 0xff
 80027fa:	f7ff ff03 	bl	8002604 <SPI_WriteByte>
					SD_Select();
 80027fe:	f7ff ff17 	bl	8002630 <SD_Select>
					if (SD_SendCommand(CMD41, 1UL << 30) == 0) {
 8002802:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002806:	2069      	movs	r0, #105	; 0x69
 8002808:	f7ff ff40 	bl	800268c <SD_SendCommand>
 800280c:	2800      	cmp	r0, #0
 800280e:	d13b      	bne.n	8002888 <SD_initialize+0x15c>
						printf("CMD55/41 success\n");
 8002810:	4846      	ldr	r0, [pc, #280]	; (800292c <SD_initialize+0x200>)
 8002812:	f000 f973 	bl	8002afc <puts>
						SD_Deselect();
 8002816:	f7ff ff13 	bl	8002640 <SD_Deselect>
						SPI_WriteByte(0xFF);
 800281a:	20ff      	movs	r0, #255	; 0xff
 800281c:	f7ff fef2 	bl	8002604 <SPI_WriteByte>
			SD_Select();
 8002820:	f7ff ff06 	bl	8002630 <SD_Select>
			if (SD_SendCommand(CMD58, 0) == 0) {
 8002824:	2100      	movs	r1, #0
 8002826:	207a      	movs	r0, #122	; 0x7a
 8002828:	f7ff ff30 	bl	800268c <SD_SendCommand>
 800282c:	4604      	mov	r4, r0
 800282e:	b990      	cbnz	r0, 8002856 <SD_initialize+0x12a>
				printf("CMD58 success\n");
 8002830:	483f      	ldr	r0, [pc, #252]	; (8002930 <SD_initialize+0x204>)
 8002832:	f000 f963 	bl	8002afc <puts>
				for (int i = 0; i < 4; i++) ocr[i] = SPI_ReadByte();
 8002836:	f7ff ff0b 	bl	8002650 <SPI_ReadByte>
 800283a:	f808 0004 	strb.w	r0, [r8, r4]
 800283e:	3401      	adds	r4, #1
 8002840:	2c04      	cmp	r4, #4
 8002842:	d1f8      	bne.n	8002836 <SD_initialize+0x10a>
				type = (ocr[0] & 0x40) ? 6 : 2;
 8002844:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002848:	f013 0f40 	tst.w	r3, #64	; 0x40
 800284c:	4b39      	ldr	r3, [pc, #228]	; (8002934 <SD_initialize+0x208>)
 800284e:	bf14      	ite	ne
 8002850:	2206      	movne	r2, #6
 8002852:	2202      	moveq	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
	SD_Deselect();
 8002856:	f7ff fef3 	bl	8002640 <SD_Deselect>
	SPI_ReadByte();
 800285a:	f7ff fef9 	bl	8002650 <SPI_ReadByte>
	if (type != 0) stat &= ~STA_NOINIT;
 800285e:	4b35      	ldr	r3, [pc, #212]	; (8002934 <SD_initialize+0x208>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	b11b      	cbz	r3, 800286c <SD_initialize+0x140>
 8002864:	7833      	ldrb	r3, [r6, #0]
 8002866:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800286a:	7033      	strb	r3, [r6, #0]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800286c:	2308      	movs	r3, #8
	HAL_SPI_Init(&hspi1);
 800286e:	482a      	ldr	r0, [pc, #168]	; (8002918 <SD_initialize+0x1ec>)
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002870:	61eb      	str	r3, [r5, #28]
	HAL_SPI_Init(&hspi1);
 8002872:	f7fe fada 	bl	8000e2a <HAL_SPI_Init>
	return stat;
 8002876:	7830      	ldrb	r0, [r6, #0]
 8002878:	e76d      	b.n	8002756 <SD_initialize+0x2a>
		r = SPI_ReadByte();
 800287a:	f7ff fee9 	bl	8002650 <SPI_ReadByte>
	for (int i = 0; i < 128; i++) {
 800287e:	3f01      	subs	r7, #1
		r = SPI_ReadByte();
 8002880:	4604      	mov	r4, r0
	for (int i = 0; i < 128; i++) {
 8002882:	f47f af7d 	bne.w	8002780 <SD_initialize+0x54>
 8002886:	e780      	b.n	800278a <SD_initialize+0x5e>
 8002888:	2780      	movs	r7, #128	; 0x80
							if (SPI_ReadByte() == 0){
 800288a:	f7ff fee1 	bl	8002650 <SPI_ReadByte>
 800288e:	b988      	cbnz	r0, 80028b4 <SD_initialize+0x188>
								printf("CMD55/41 success\n");
 8002890:	4648      	mov	r0, r9
 8002892:	f000 f933 	bl	8002afc <puts>
								SD_Deselect();
 8002896:	f7ff fed3 	bl	8002640 <SD_Deselect>
								SPI_WriteByte(0xFF);
 800289a:	20ff      	movs	r0, #255	; 0xff
 800289c:	f7ff feb2 	bl	8002604 <SPI_WriteByte>
						SD_Deselect();
 80028a0:	f7ff fece 	bl	8002640 <SD_Deselect>
						SPI_WriteByte(0xFF);
 80028a4:	20ff      	movs	r0, #255	; 0xff
 80028a6:	f7ff fead 	bl	8002604 <SPI_WriteByte>
						SD_Select();
 80028aa:	f7ff fec1 	bl	8002630 <SD_Select>
			for (int i = 0; i < 128; i++) {
 80028ae:	3c01      	subs	r4, #1
 80028b0:	d19a      	bne.n	80027e8 <SD_initialize+0xbc>
 80028b2:	e7b5      	b.n	8002820 <SD_initialize+0xf4>
						for (int j = 0; j < 128; j++) {
 80028b4:	3f01      	subs	r7, #1
 80028b6:	d1e8      	bne.n	800288a <SD_initialize+0x15e>
 80028b8:	e7f2      	b.n	80028a0 <SD_initialize+0x174>
		type = (SD_SendCommand(CMD55, 0) <= 1 && SD_SendCommand(CMD41, 0) <= 1) ? 2 : 1;
 80028ba:	2100      	movs	r1, #0
 80028bc:	2077      	movs	r0, #119	; 0x77
 80028be:	f7ff fee5 	bl	800268c <SD_SendCommand>
 80028c2:	2801      	cmp	r0, #1
 80028c4:	d806      	bhi.n	80028d4 <SD_initialize+0x1a8>
 80028c6:	2100      	movs	r1, #0
 80028c8:	2069      	movs	r0, #105	; 0x69
 80028ca:	f7ff fedf 	bl	800268c <SD_SendCommand>
 80028ce:	2801      	cmp	r0, #1
 80028d0:	bf98      	it	ls
 80028d2:	2402      	movls	r4, #2
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <SD_initialize+0x208>)
 80028d6:	f24c 3750 	movw	r7, #50000	; 0xc350
 80028da:	701c      	strb	r4, [r3, #0]
 80028dc:	461c      	mov	r4, r3
			r = SD_SendCommand(CMD55, 0);
 80028de:	2100      	movs	r1, #0
 80028e0:	2077      	movs	r0, #119	; 0x77
 80028e2:	f7ff fed3 	bl	800268c <SD_SendCommand>
			if (r <= 0x01 && SD_SendCommand(CMD41, 0) == 0) break;
 80028e6:	2801      	cmp	r0, #1
 80028e8:	d810      	bhi.n	800290c <SD_initialize+0x1e0>
 80028ea:	2100      	movs	r1, #0
 80028ec:	2069      	movs	r0, #105	; 0x69
 80028ee:	f7ff fecd 	bl	800268c <SD_SendCommand>
 80028f2:	b108      	cbz	r0, 80028f8 <SD_initialize+0x1cc>
		for (int i = 0; i < 50000; i++) {
 80028f4:	3f01      	subs	r7, #1
 80028f6:	d1f2      	bne.n	80028de <SD_initialize+0x1b2>
	    if (SD_SendCommand(CMD16, 512) != 0) type = 0;
 80028f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028fc:	2050      	movs	r0, #80	; 0x50
 80028fe:	f7ff fec5 	bl	800268c <SD_SendCommand>
 8002902:	2800      	cmp	r0, #0
 8002904:	d0a7      	beq.n	8002856 <SD_initialize+0x12a>
 8002906:	2300      	movs	r3, #0
 8002908:	7023      	strb	r3, [r4, #0]
 800290a:	e7a4      	b.n	8002856 <SD_initialize+0x12a>
			else if (r == 0x05 && SD_SendCommand(CMD1, 0) == 0) break;
 800290c:	2805      	cmp	r0, #5
 800290e:	d1f1      	bne.n	80028f4 <SD_initialize+0x1c8>
 8002910:	2100      	movs	r1, #0
 8002912:	2041      	movs	r0, #65	; 0x41
 8002914:	e7eb      	b.n	80028ee <SD_initialize+0x1c2>
 8002916:	bf00      	nop
 8002918:	200004e0 	.word	0x200004e0
 800291c:	20000070 	.word	0x20000070
 8002920:	08002ca4 	.word	0x08002ca4
 8002924:	08002cb1 	.word	0x08002cb1
 8002928:	08002cbe 	.word	0x08002cbe
 800292c:	08002ccc 	.word	0x08002ccc
 8002930:	08002cdd 	.word	0x08002cdd
 8002934:	20000071 	.word	0x20000071

08002938 <SD_status>:

DSTATUS SD_status (BYTE pdrv) {
	return (pdrv == 0) ? stat : STA_NOINIT;
 8002938:	b918      	cbnz	r0, 8002942 <SD_status+0xa>
 800293a:	4b03      	ldr	r3, [pc, #12]	; (8002948 <SD_status+0x10>)
 800293c:	7818      	ldrb	r0, [r3, #0]
 800293e:	b2c0      	uxtb	r0, r0
 8002940:	4770      	bx	lr
 8002942:	2001      	movs	r0, #1
}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000070 	.word	0x20000070

0800294c <SD_read>:

DRESULT SD_read (BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 800294c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800294e:	460d      	mov	r5, r1
 8002950:	4614      	mov	r4, r2
 8002952:	9301      	str	r3, [sp, #4]
	// Invalid parameters
	if (pdrv != 0 || count == 0) return RES_PARERR;
 8002954:	bb58      	cbnz	r0, 80029ae <SD_read+0x62>
 8002956:	b353      	cbz	r3, 80029ae <SD_read+0x62>
	// Not initialized
	if (stat & STA_NOINIT) return RES_NOTRDY;
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <SD_read+0x6c>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	07db      	lsls	r3, r3, #31
 800295e:	d428      	bmi.n	80029b2 <SD_read+0x66>

	SD_Select();
 8002960:	f7ff fe66 	bl	8002630 <SD_Select>
	// Read single block
	if (count == 1) {
 8002964:	9b01      	ldr	r3, [sp, #4]
 8002966:	2b01      	cmp	r3, #1
		// Send receive command
		if (SD_SendCommand(CMD17, sector) == 0) {
 8002968:	4621      	mov	r1, r4
	if (count == 1) {
 800296a:	d111      	bne.n	8002990 <SD_read+0x44>
		if (SD_SendCommand(CMD17, sector) == 0) {
 800296c:	2051      	movs	r0, #81	; 0x51
 800296e:	f7ff fe8d 	bl	800268c <SD_SendCommand>
 8002972:	b918      	cbnz	r0, 800297c <SD_read+0x30>
			SD_ReadBlock(buff, &count);
 8002974:	a901      	add	r1, sp, #4
 8002976:	4628      	mov	r0, r5
 8002978:	f7ff feb9 	bl	80026ee <SD_ReadBlock>
		if (SD_SendCommand(CMD18, sector) == 0) {
			SD_ReadBlock(buff, &count);
			SD_SendCommand(CMD12, 0);
		}
	}
	SD_Deselect();
 800297c:	f7ff fe60 	bl	8002640 <SD_Deselect>
	SPI_ReadByte();
 8002980:	f7ff fe66 	bl	8002650 <SPI_ReadByte>
	return (count == 0) ? RES_OK : RES_ERROR;
 8002984:	9801      	ldr	r0, [sp, #4]
 8002986:	3000      	adds	r0, #0
 8002988:	bf18      	it	ne
 800298a:	2001      	movne	r0, #1
}
 800298c:	b003      	add	sp, #12
 800298e:	bd30      	pop	{r4, r5, pc}
		if (SD_SendCommand(CMD18, sector) == 0) {
 8002990:	2052      	movs	r0, #82	; 0x52
 8002992:	f7ff fe7b 	bl	800268c <SD_SendCommand>
 8002996:	4604      	mov	r4, r0
 8002998:	2800      	cmp	r0, #0
 800299a:	d1ef      	bne.n	800297c <SD_read+0x30>
			SD_ReadBlock(buff, &count);
 800299c:	a901      	add	r1, sp, #4
 800299e:	4628      	mov	r0, r5
 80029a0:	f7ff fea5 	bl	80026ee <SD_ReadBlock>
			SD_SendCommand(CMD12, 0);
 80029a4:	4621      	mov	r1, r4
 80029a6:	204c      	movs	r0, #76	; 0x4c
 80029a8:	f7ff fe70 	bl	800268c <SD_SendCommand>
 80029ac:	e7e6      	b.n	800297c <SD_read+0x30>
	if (pdrv != 0 || count == 0) return RES_PARERR;
 80029ae:	2004      	movs	r0, #4
 80029b0:	e7ec      	b.n	800298c <SD_read+0x40>
	if (stat & STA_NOINIT) return RES_NOTRDY;
 80029b2:	2003      	movs	r0, #3
 80029b4:	e7ea      	b.n	800298c <SD_read+0x40>
 80029b6:	bf00      	nop
 80029b8:	20000070 	.word	0x20000070

080029bc <SD_write>:

DRESULT SD_write (BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
	// TODO: Implement
	return RES_OK;
}
 80029bc:	2000      	movs	r0, #0
 80029be:	4770      	bx	lr

080029c0 <SD_ioctl>:

DRESULT SD_ioctl (BYTE pdrv, BYTE cmd, void* buff) {
	// TODO: Implement
	return RES_OK;
}
 80029c0:	2000      	movs	r0, #0
 80029c2:	4770      	bx	lr

080029c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_MspInit+0x34>)
 80029c8:	2100      	movs	r1, #0
 80029ca:	9100      	str	r1, [sp, #0]
 80029cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
 80029d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029da:	9200      	str	r2, [sp, #0]
 80029dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	9101      	str	r1, [sp, #4]
 80029e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f2:	b002      	add	sp, #8
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029fc:	b510      	push	{r4, lr}
 80029fe:	4604      	mov	r4, r0
 8002a00:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a02:	2214      	movs	r2, #20
 8002a04:	2100      	movs	r1, #0
 8002a06:	a803      	add	r0, sp, #12
 8002a08:	f000 f8ea 	bl	8002be0 <memset>
  if(hspi->Instance==SPI1)
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_SPI_MspInit+0x64>)
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d122      	bne.n	8002a5a <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a14:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002a18:	2100      	movs	r1, #0
 8002a1a:	9101      	str	r1, [sp, #4]
 8002a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	4811      	ldr	r0, [pc, #68]	; (8002a64 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
 8002a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a28:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a2c:	9201      	str	r2, [sp, #4]
 8002a2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a30:	9102      	str	r1, [sp, #8]
 8002a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	9302      	str	r3, [sp, #8]
 8002a42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a44:	23e0      	movs	r3, #224	; 0xe0
 8002a46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a52:	2305      	movs	r3, #5
 8002a54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	f7fd fe19 	bl	800068c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a5a:	b008      	add	sp, #32
 8002a5c:	bd10      	pop	{r4, pc}
 8002a5e:	bf00      	nop
 8002a60:	40013000 	.word	0x40013000
 8002a64:	40020000 	.word	0x40020000

08002a68 <NMI_Handler>:
 8002a68:	4770      	bx	lr

08002a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a6a:	e7fe      	b.n	8002a6a <HardFault_Handler>

08002a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a6c:	e7fe      	b.n	8002a6c <MemManage_Handler>

08002a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a6e:	e7fe      	b.n	8002a6e <BusFault_Handler>

08002a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a70:	e7fe      	b.n	8002a70 <UsageFault_Handler>

08002a72 <SVC_Handler>:
 8002a72:	4770      	bx	lr

08002a74 <DebugMon_Handler>:
 8002a74:	4770      	bx	lr

08002a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a76:	4770      	bx	lr

08002a78 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a78:	f7fd bd86 	b.w	8000588 <HAL_IncTick>

08002a7c <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002a7c:	b510      	push	{r4, lr}
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
	for(i=0 ; i<len ; i++)
 8002a7e:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a80:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8002a84:	4293      	cmp	r3, r2
 8002a86:	db01      	blt.n	8002a8c <_write+0x10>
		ITM_SendChar((*ptr++));
	return len;
}
 8002a88:	4610      	mov	r0, r2
 8002a8a:	bd10      	pop	{r4, pc}
 8002a8c:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8002a90:	07c0      	lsls	r0, r0, #31
 8002a92:	d503      	bpl.n	8002a9c <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002a94:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a98:	07c0      	lsls	r0, r0, #31
 8002a9a:	d402      	bmi.n	8002aa2 <_write+0x26>
	for(i=0 ; i<len ; i++)
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	e7f1      	b.n	8002a84 <_write+0x8>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002aa0:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002aa2:	6820      	ldr	r0, [r4, #0]
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d0fb      	beq.n	8002aa0 <_write+0x24>
		ITM_SendChar((*ptr++));
 8002aa8:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002aaa:	7020      	strb	r0, [r4, #0]
 8002aac:	e7f6      	b.n	8002a9c <_write+0x20>
	...

08002ab0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab0:	490f      	ldr	r1, [pc, #60]	; (8002af0 <SystemInit+0x40>)
 8002ab2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ab6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <SystemInit+0x44>)
 8002ac0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ac2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002aca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ad2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ad8:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <SystemInit+0x48>)
 8002ada:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ae4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ae6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002aea:	608b      	str	r3, [r1, #8]
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000ed00 	.word	0xe000ed00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	24003010 	.word	0x24003010

08002afc <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8002afc:	b538      	push	{r3, r4, r5, lr}
 8002afe:	4605      	mov	r5, r0
	int length = strlen(s);
 8002b00:	f7fd fb74 	bl	80001ec <strlen>
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 8002b04:	4629      	mov	r1, r5
 8002b06:	4602      	mov	r2, r0
	int length = strlen(s);
 8002b08:	4604      	mov	r4, r0
	numbytes = _write(1, (char*)s, length);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7ff ffb6 	bl	8002a7c <_write>
	numbytes += _write(1, "\n", 1);
 8002b10:	2201      	movs	r2, #1
	numbytes = _write(1, (char*)s, length);
 8002b12:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 8002b14:	4905      	ldr	r1, [pc, #20]	; (8002b2c <puts+0x30>)
 8002b16:	4610      	mov	r0, r2
 8002b18:	f7ff ffb0 	bl	8002a7c <_write>

	if (numbytes == (length+1))
 8002b1c:	3401      	adds	r4, #1
	numbytes += _write(1, "\n", 1);
 8002b1e:	4428      	add	r0, r5
	{
		res = EOF;
	}

	return res;
}
 8002b20:	1b00      	subs	r0, r0, r4
 8002b22:	bf18      	it	ne
 8002b24:	f04f 30ff 	movne.w	r0, #4294967295
 8002b28:	bd38      	pop	{r3, r4, r5, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08002ca2 	.word	0x08002ca2

08002b30 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	return SD_initialize(pdrv);
 8002b30:	f7ff bdfc 	b.w	800272c <SD_initialize>

08002b34 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
	return SD_status(pdrv);
 8002b34:	f7ff bf00 	b.w	8002938 <SD_status>

08002b38 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	return SD_read(pdrv, buff, sector, count);
 8002b38:	f7ff bf08 	b.w	800294c <SD_read>

08002b3c <USER_write>:
	UINT count          /* Number of sectors to write */
)
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_write(pdrv, buff, sector, count);
 8002b3c:	f7ff bf3e 	b.w	80029bc <SD_write>

08002b40 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
	return SD_ioctl(pdrv, cmd, buff);
 8002b40:	f7ff bf3e 	b.w	80029c0 <SD_ioctl>

08002b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b7c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b4a:	e003      	b.n	8002b54 <LoopCopyDataInit>

08002b4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b52:	3104      	adds	r1, #4

08002b54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b5c:	d3f6      	bcc.n	8002b4c <CopyDataInit>
  ldr  r2, =_sbss
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b60:	e002      	b.n	8002b68 <LoopFillZerobss>

08002b62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b64:	f842 3b04 	str.w	r3, [r2], #4

08002b68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b6c:	d3f9      	bcc.n	8002b62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b6e:	f7ff ff9f 	bl	8002ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b72:	f000 f811 	bl	8002b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b76:	f7ff fcdb 	bl	8002530 <main>
  bx  lr    
 8002b7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b7c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002b80:	08002d0c 	.word	0x08002d0c
  ldr  r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b88:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8002b8c:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8002b90:	20000538 	.word	0x20000538

08002b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC_IRQHandler>
	...

08002b98 <__libc_init_array>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	4e0d      	ldr	r6, [pc, #52]	; (8002bd0 <__libc_init_array+0x38>)
 8002b9c:	4c0d      	ldr	r4, [pc, #52]	; (8002bd4 <__libc_init_array+0x3c>)
 8002b9e:	1ba4      	subs	r4, r4, r6
 8002ba0:	10a4      	asrs	r4, r4, #2
 8002ba2:	2500      	movs	r5, #0
 8002ba4:	42a5      	cmp	r5, r4
 8002ba6:	d109      	bne.n	8002bbc <__libc_init_array+0x24>
 8002ba8:	4e0b      	ldr	r6, [pc, #44]	; (8002bd8 <__libc_init_array+0x40>)
 8002baa:	4c0c      	ldr	r4, [pc, #48]	; (8002bdc <__libc_init_array+0x44>)
 8002bac:	f000 f820 	bl	8002bf0 <_init>
 8002bb0:	1ba4      	subs	r4, r4, r6
 8002bb2:	10a4      	asrs	r4, r4, #2
 8002bb4:	2500      	movs	r5, #0
 8002bb6:	42a5      	cmp	r5, r4
 8002bb8:	d105      	bne.n	8002bc6 <__libc_init_array+0x2e>
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
 8002bbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bc0:	4798      	blx	r3
 8002bc2:	3501      	adds	r5, #1
 8002bc4:	e7ee      	b.n	8002ba4 <__libc_init_array+0xc>
 8002bc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bca:	4798      	blx	r3
 8002bcc:	3501      	adds	r5, #1
 8002bce:	e7f2      	b.n	8002bb6 <__libc_init_array+0x1e>
 8002bd0:	08002d04 	.word	0x08002d04
 8002bd4:	08002d04 	.word	0x08002d04
 8002bd8:	08002d04 	.word	0x08002d04
 8002bdc:	08002d08 	.word	0x08002d08

08002be0 <memset>:
 8002be0:	4402      	add	r2, r0
 8002be2:	4603      	mov	r3, r0
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d100      	bne.n	8002bea <memset+0xa>
 8002be8:	4770      	bx	lr
 8002bea:	f803 1b01 	strb.w	r1, [r3], #1
 8002bee:	e7f9      	b.n	8002be4 <memset+0x4>

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
